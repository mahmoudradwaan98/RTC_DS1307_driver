
RTC_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000275c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  0000275c  000027f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000a8  008000a8  00002838  2**0
                  ALLOC
  3 .stab         00002904  00000000  00000000  00002838  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015a2  00000000  00000000  0000513c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000066de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000683e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000069cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000aa98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000ac18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000aeda  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3b       	cpi	r26, 0xB1	; 177
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 13 	call	0x2624	; 0x2624 <main>
      8a:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 85 13 	jmp	0x270a	; 0x270a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MCAL_DIO_u8SetPinDirection>:
#include "DIO_private.h"
#include "DIO_config.h"



u8 MCAL_DIO_u8SetPinDirection(u8 copy_u8port,u8 copy_u8pin,u8 copy_u8direction){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	28 97       	sbiw	r28, 0x08	; 8
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	8a 83       	std	Y+2, r24	; 0x02
     cb4:	6b 83       	std	Y+3, r22	; 0x03
     cb6:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_ErrorState = 0;
     cb8:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8pin <= DIO_U8PIN7){
     cba:	8b 81       	ldd	r24, Y+3	; 0x03
     cbc:	88 30       	cpi	r24, 0x08	; 8
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <MCAL_DIO_u8SetPinDirection+0x24>
     cc0:	f4 c0       	rjmp	.+488    	; 0xeaa <MCAL_DIO_u8SetPinDirection+0x20c>

		if(copy_u8direction==DIO_U8PIN_OUTPUT){
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	09 f0       	breq	.+2      	; 0xcca <MCAL_DIO_u8SetPinDirection+0x2c>
     cc8:	72 c0       	rjmp	.+228    	; 0xdae <MCAL_DIO_u8SetPinDirection+0x110>

			switch(copy_u8port){
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	38 87       	std	Y+8, r19	; 0x08
     cd2:	2f 83       	std	Y+7, r18	; 0x07
     cd4:	8f 81       	ldd	r24, Y+7	; 0x07
     cd6:	98 85       	ldd	r25, Y+8	; 0x08
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	91 05       	cpc	r25, r1
     cdc:	49 f1       	breq	.+82     	; 0xd30 <MCAL_DIO_u8SetPinDirection+0x92>
     cde:	2f 81       	ldd	r18, Y+7	; 0x07
     ce0:	38 85       	ldd	r19, Y+8	; 0x08
     ce2:	22 30       	cpi	r18, 0x02	; 2
     ce4:	31 05       	cpc	r19, r1
     ce6:	2c f4       	brge	.+10     	; 0xcf2 <MCAL_DIO_u8SetPinDirection+0x54>
     ce8:	8f 81       	ldd	r24, Y+7	; 0x07
     cea:	98 85       	ldd	r25, Y+8	; 0x08
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	61 f0       	breq	.+24     	; 0xd08 <MCAL_DIO_u8SetPinDirection+0x6a>
     cf0:	5b c0       	rjmp	.+182    	; 0xda8 <MCAL_DIO_u8SetPinDirection+0x10a>
     cf2:	2f 81       	ldd	r18, Y+7	; 0x07
     cf4:	38 85       	ldd	r19, Y+8	; 0x08
     cf6:	22 30       	cpi	r18, 0x02	; 2
     cf8:	31 05       	cpc	r19, r1
     cfa:	71 f1       	breq	.+92     	; 0xd58 <MCAL_DIO_u8SetPinDirection+0xba>
     cfc:	8f 81       	ldd	r24, Y+7	; 0x07
     cfe:	98 85       	ldd	r25, Y+8	; 0x08
     d00:	83 30       	cpi	r24, 0x03	; 3
     d02:	91 05       	cpc	r25, r1
     d04:	e9 f1       	breq	.+122    	; 0xd80 <MCAL_DIO_u8SetPinDirection+0xe2>
     d06:	50 c0       	rjmp	.+160    	; 0xda8 <MCAL_DIO_u8SetPinDirection+0x10a>

			case  DIO_U8PORTA: SET_BIT(DDRA,copy_u8pin); break;
     d08:	aa e3       	ldi	r26, 0x3A	; 58
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ea e3       	ldi	r30, 0x3A	; 58
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <MCAL_DIO_u8SetPinDirection+0x88>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <MCAL_DIO_u8SetPinDirection+0x84>
     d2a:	84 2b       	or	r24, r20
     d2c:	8c 93       	st	X, r24
     d2e:	bf c0       	rjmp	.+382    	; 0xeae <MCAL_DIO_u8SetPinDirection+0x210>
			case  DIO_U8PORTB: SET_BIT(DDRB,copy_u8pin); break;
     d30:	a7 e3       	ldi	r26, 0x37	; 55
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e7 e3       	ldi	r30, 0x37	; 55
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	48 2f       	mov	r20, r24
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	28 2f       	mov	r18, r24
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	02 2e       	mov	r0, r18
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <MCAL_DIO_u8SetPinDirection+0xb0>
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	0a 94       	dec	r0
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <MCAL_DIO_u8SetPinDirection+0xac>
     d52:	84 2b       	or	r24, r20
     d54:	8c 93       	st	X, r24
     d56:	ab c0       	rjmp	.+342    	; 0xeae <MCAL_DIO_u8SetPinDirection+0x210>
			case  DIO_U8PORTC: SET_BIT(DDRC,copy_u8pin); break;
     d58:	a4 e3       	ldi	r26, 0x34	; 52
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e4 e3       	ldi	r30, 0x34	; 52
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	48 2f       	mov	r20, r24
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 2e       	mov	r0, r18
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <MCAL_DIO_u8SetPinDirection+0xd8>
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	0a 94       	dec	r0
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <MCAL_DIO_u8SetPinDirection+0xd4>
     d7a:	84 2b       	or	r24, r20
     d7c:	8c 93       	st	X, r24
     d7e:	97 c0       	rjmp	.+302    	; 0xeae <MCAL_DIO_u8SetPinDirection+0x210>
			case  DIO_U8PORTD: SET_BIT(DDRD,copy_u8pin); break;
     d80:	a1 e3       	ldi	r26, 0x31	; 49
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e1 e3       	ldi	r30, 0x31	; 49
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <MCAL_DIO_u8SetPinDirection+0x100>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <MCAL_DIO_u8SetPinDirection+0xfc>
     da2:	84 2b       	or	r24, r20
     da4:	8c 93       	st	X, r24
     da6:	83 c0       	rjmp	.+262    	; 0xeae <MCAL_DIO_u8SetPinDirection+0x210>
			default :Local_ErrorState=1;break;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	80 c0       	rjmp	.+256    	; 0xeae <MCAL_DIO_u8SetPinDirection+0x210>

			}

		}
		else if(copy_u8direction==DIO_U8PIN_INPUT){
     dae:	8c 81       	ldd	r24, Y+4	; 0x04
     db0:	88 23       	and	r24, r24
     db2:	09 f0       	breq	.+2      	; 0xdb6 <MCAL_DIO_u8SetPinDirection+0x118>
     db4:	77 c0       	rjmp	.+238    	; 0xea4 <MCAL_DIO_u8SetPinDirection+0x206>

			switch(copy_u8port){
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	3e 83       	std	Y+6, r19	; 0x06
     dbe:	2d 83       	std	Y+5, r18	; 0x05
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	9e 81       	ldd	r25, Y+6	; 0x06
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	91 05       	cpc	r25, r1
     dc8:	59 f1       	breq	.+86     	; 0xe20 <MCAL_DIO_u8SetPinDirection+0x182>
     dca:	2d 81       	ldd	r18, Y+5	; 0x05
     dcc:	3e 81       	ldd	r19, Y+6	; 0x06
     dce:	22 30       	cpi	r18, 0x02	; 2
     dd0:	31 05       	cpc	r19, r1
     dd2:	2c f4       	brge	.+10     	; 0xdde <MCAL_DIO_u8SetPinDirection+0x140>
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	9e 81       	ldd	r25, Y+6	; 0x06
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	69 f0       	breq	.+26     	; 0xdf6 <MCAL_DIO_u8SetPinDirection+0x158>
     ddc:	60 c0       	rjmp	.+192    	; 0xe9e <MCAL_DIO_u8SetPinDirection+0x200>
     dde:	2d 81       	ldd	r18, Y+5	; 0x05
     de0:	3e 81       	ldd	r19, Y+6	; 0x06
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	89 f1       	breq	.+98     	; 0xe4a <MCAL_DIO_u8SetPinDirection+0x1ac>
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	83 30       	cpi	r24, 0x03	; 3
     dee:	91 05       	cpc	r25, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <MCAL_DIO_u8SetPinDirection+0x156>
     df2:	40 c0       	rjmp	.+128    	; 0xe74 <MCAL_DIO_u8SetPinDirection+0x1d6>
     df4:	54 c0       	rjmp	.+168    	; 0xe9e <MCAL_DIO_u8SetPinDirection+0x200>

			case  DIO_U8PORTA: CLR_BIT(DDRA,copy_u8pin); break;
     df6:	aa e3       	ldi	r26, 0x3A	; 58
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	ea e3       	ldi	r30, 0x3A	; 58
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <MCAL_DIO_u8SetPinDirection+0x176>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <MCAL_DIO_u8SetPinDirection+0x172>
     e18:	80 95       	com	r24
     e1a:	84 23       	and	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	47 c0       	rjmp	.+142    	; 0xeae <MCAL_DIO_u8SetPinDirection+0x210>
			case  DIO_U8PORTB: CLR_BIT(DDRB,copy_u8pin); break;
     e20:	a7 e3       	ldi	r26, 0x37	; 55
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e7 e3       	ldi	r30, 0x37	; 55
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <MCAL_DIO_u8SetPinDirection+0x1a0>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <MCAL_DIO_u8SetPinDirection+0x19c>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	32 c0       	rjmp	.+100    	; 0xeae <MCAL_DIO_u8SetPinDirection+0x210>
			case  DIO_U8PORTC: CLR_BIT(DDRC,copy_u8pin); break;
     e4a:	a4 e3       	ldi	r26, 0x34	; 52
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e4 e3       	ldi	r30, 0x34	; 52
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <MCAL_DIO_u8SetPinDirection+0x1ca>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <MCAL_DIO_u8SetPinDirection+0x1c6>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	1d c0       	rjmp	.+58     	; 0xeae <MCAL_DIO_u8SetPinDirection+0x210>
			case  DIO_U8PORTD: CLR_BIT(DDRD,copy_u8pin); break;
     e74:	a1 e3       	ldi	r26, 0x31	; 49
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e1 e3       	ldi	r30, 0x31	; 49
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <MCAL_DIO_u8SetPinDirection+0x1f4>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <MCAL_DIO_u8SetPinDirection+0x1f0>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	08 c0       	rjmp	.+16     	; 0xeae <MCAL_DIO_u8SetPinDirection+0x210>
			default :Local_ErrorState=1;break;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <MCAL_DIO_u8SetPinDirection+0x210>
			}


		}
		else{
			Local_ErrorState=1;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <MCAL_DIO_u8SetPinDirection+0x210>
			}
	}
	else{
		Local_ErrorState = 1;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
     eae:	89 81       	ldd	r24, Y+1	; 0x01

}
     eb0:	28 96       	adiw	r28, 0x08	; 8
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <MCAL_DIO_u8SetPortDirection>:

u8 MCAL_DIO_u8SetPortDirection(u8 copy_u8port,u8 copy_u8direction){
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <MCAL_DIO_u8SetPortDirection+0x6>
     ec8:	00 d0       	rcall	.+0      	; 0xeca <MCAL_DIO_u8SetPortDirection+0x8>
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	8a 83       	std	Y+2, r24	; 0x02
     ed2:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_ErrorState = 0;
     ed4:	19 82       	std	Y+1, r1	; 0x01

	switch(copy_u8port){
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3d 83       	std	Y+5, r19	; 0x05
     ede:	2c 83       	std	Y+4, r18	; 0x04
     ee0:	8c 81       	ldd	r24, Y+4	; 0x04
     ee2:	9d 81       	ldd	r25, Y+5	; 0x05
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	d1 f0       	breq	.+52     	; 0xf1e <MCAL_DIO_u8SetPortDirection+0x5c>
     eea:	2c 81       	ldd	r18, Y+4	; 0x04
     eec:	3d 81       	ldd	r19, Y+5	; 0x05
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	2c f4       	brge	.+10     	; 0xefe <MCAL_DIO_u8SetPortDirection+0x3c>
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	9d 81       	ldd	r25, Y+5	; 0x05
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	61 f0       	breq	.+24     	; 0xf14 <MCAL_DIO_u8SetPortDirection+0x52>
     efc:	1f c0       	rjmp	.+62     	; 0xf3c <MCAL_DIO_u8SetPortDirection+0x7a>
     efe:	2c 81       	ldd	r18, Y+4	; 0x04
     f00:	3d 81       	ldd	r19, Y+5	; 0x05
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	81 f0       	breq	.+32     	; 0xf28 <MCAL_DIO_u8SetPortDirection+0x66>
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	9d 81       	ldd	r25, Y+5	; 0x05
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	91 05       	cpc	r25, r1
     f10:	81 f0       	breq	.+32     	; 0xf32 <MCAL_DIO_u8SetPortDirection+0x70>
     f12:	14 c0       	rjmp	.+40     	; 0xf3c <MCAL_DIO_u8SetPortDirection+0x7a>

	case  DIO_U8PORTA: DDRA = copy_u8direction; break;
     f14:	ea e3       	ldi	r30, 0x3A	; 58
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	80 83       	st	Z, r24
     f1c:	11 c0       	rjmp	.+34     	; 0xf40 <MCAL_DIO_u8SetPortDirection+0x7e>
	case  DIO_U8PORTB: DDRB = copy_u8direction; break;
     f1e:	e7 e3       	ldi	r30, 0x37	; 55
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	80 83       	st	Z, r24
     f26:	0c c0       	rjmp	.+24     	; 0xf40 <MCAL_DIO_u8SetPortDirection+0x7e>
	case  DIO_U8PORTC: DDRC = copy_u8direction; break;
     f28:	e4 e3       	ldi	r30, 0x34	; 52
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	80 83       	st	Z, r24
     f30:	07 c0       	rjmp	.+14     	; 0xf40 <MCAL_DIO_u8SetPortDirection+0x7e>
	case  DIO_U8PORTD: DDRD = copy_u8direction; break;
     f32:	e1 e3       	ldi	r30, 0x31	; 49
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	80 83       	st	Z, r24
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <MCAL_DIO_u8SetPortDirection+0x7e>
	default :Local_ErrorState=1; break;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_ErrorState;
     f40:	89 81       	ldd	r24, Y+1	; 0x01
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <MCAL_DIO_u8SetPinValue>:

u8 MCAL_DIO_u8SetPinValue(u8 copy_u8port,u8 copy_u8pin, u8 copy_u8value){
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	28 97       	sbiw	r28, 0x08	; 8
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	8a 83       	std	Y+2, r24	; 0x02
     f68:	6b 83       	std	Y+3, r22	; 0x03
     f6a:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_ErrorState = 0;
     f6c:	19 82       	std	Y+1, r1	; 0x01
		if(copy_u8pin <= DIO_U8PIN7){
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	88 30       	cpi	r24, 0x08	; 8
     f72:	08 f0       	brcs	.+2      	; 0xf76 <MCAL_DIO_u8SetPinValue+0x24>
     f74:	f4 c0       	rjmp	.+488    	; 0x115e <MCAL_DIO_u8SetPinValue+0x20c>

			if(copy_u8value==DIO_U8PIN_HIGH){
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	09 f0       	breq	.+2      	; 0xf7e <MCAL_DIO_u8SetPinValue+0x2c>
     f7c:	72 c0       	rjmp	.+228    	; 0x1062 <MCAL_DIO_u8SetPinValue+0x110>

				switch(copy_u8port){
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	38 87       	std	Y+8, r19	; 0x08
     f86:	2f 83       	std	Y+7, r18	; 0x07
     f88:	8f 81       	ldd	r24, Y+7	; 0x07
     f8a:	98 85       	ldd	r25, Y+8	; 0x08
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	91 05       	cpc	r25, r1
     f90:	49 f1       	breq	.+82     	; 0xfe4 <MCAL_DIO_u8SetPinValue+0x92>
     f92:	2f 81       	ldd	r18, Y+7	; 0x07
     f94:	38 85       	ldd	r19, Y+8	; 0x08
     f96:	22 30       	cpi	r18, 0x02	; 2
     f98:	31 05       	cpc	r19, r1
     f9a:	2c f4       	brge	.+10     	; 0xfa6 <MCAL_DIO_u8SetPinValue+0x54>
     f9c:	8f 81       	ldd	r24, Y+7	; 0x07
     f9e:	98 85       	ldd	r25, Y+8	; 0x08
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	61 f0       	breq	.+24     	; 0xfbc <MCAL_DIO_u8SetPinValue+0x6a>
     fa4:	5b c0       	rjmp	.+182    	; 0x105c <MCAL_DIO_u8SetPinValue+0x10a>
     fa6:	2f 81       	ldd	r18, Y+7	; 0x07
     fa8:	38 85       	ldd	r19, Y+8	; 0x08
     faa:	22 30       	cpi	r18, 0x02	; 2
     fac:	31 05       	cpc	r19, r1
     fae:	71 f1       	breq	.+92     	; 0x100c <MCAL_DIO_u8SetPinValue+0xba>
     fb0:	8f 81       	ldd	r24, Y+7	; 0x07
     fb2:	98 85       	ldd	r25, Y+8	; 0x08
     fb4:	83 30       	cpi	r24, 0x03	; 3
     fb6:	91 05       	cpc	r25, r1
     fb8:	e9 f1       	breq	.+122    	; 0x1034 <MCAL_DIO_u8SetPinValue+0xe2>
     fba:	50 c0       	rjmp	.+160    	; 0x105c <MCAL_DIO_u8SetPinValue+0x10a>

				case  DIO_U8PORTA: SET_BIT(PORTA,copy_u8pin); break;
     fbc:	ab e3       	ldi	r26, 0x3B	; 59
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	eb e3       	ldi	r30, 0x3B	; 59
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <MCAL_DIO_u8SetPinValue+0x88>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <MCAL_DIO_u8SetPinValue+0x84>
     fde:	84 2b       	or	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	bf c0       	rjmp	.+382    	; 0x1162 <MCAL_DIO_u8SetPinValue+0x210>
				case  DIO_U8PORTB: SET_BIT(PORTB,copy_u8pin); break;
     fe4:	a8 e3       	ldi	r26, 0x38	; 56
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e8 e3       	ldi	r30, 0x38	; 56
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <MCAL_DIO_u8SetPinValue+0xb0>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <MCAL_DIO_u8SetPinValue+0xac>
    1006:	84 2b       	or	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	ab c0       	rjmp	.+342    	; 0x1162 <MCAL_DIO_u8SetPinValue+0x210>
				case  DIO_U8PORTC: SET_BIT(PORTC,copy_u8pin); break;
    100c:	a5 e3       	ldi	r26, 0x35	; 53
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e5 e3       	ldi	r30, 0x35	; 53
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <MCAL_DIO_u8SetPinValue+0xd8>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <MCAL_DIO_u8SetPinValue+0xd4>
    102e:	84 2b       	or	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	97 c0       	rjmp	.+302    	; 0x1162 <MCAL_DIO_u8SetPinValue+0x210>
				case  DIO_U8PORTD: SET_BIT(PORTD,copy_u8pin); break;
    1034:	a2 e3       	ldi	r26, 0x32	; 50
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e2 e3       	ldi	r30, 0x32	; 50
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <MCAL_DIO_u8SetPinValue+0x100>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <MCAL_DIO_u8SetPinValue+0xfc>
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	83 c0       	rjmp	.+262    	; 0x1162 <MCAL_DIO_u8SetPinValue+0x210>
				default :Local_ErrorState=1;break;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	80 c0       	rjmp	.+256    	; 0x1162 <MCAL_DIO_u8SetPinValue+0x210>

				}

			}
			else if(copy_u8value==DIO_U8PIN_LOW){
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	88 23       	and	r24, r24
    1066:	09 f0       	breq	.+2      	; 0x106a <MCAL_DIO_u8SetPinValue+0x118>
    1068:	77 c0       	rjmp	.+238    	; 0x1158 <MCAL_DIO_u8SetPinValue+0x206>

				switch(copy_u8port){
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	3e 83       	std	Y+6, r19	; 0x06
    1072:	2d 83       	std	Y+5, r18	; 0x05
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	91 05       	cpc	r25, r1
    107c:	59 f1       	breq	.+86     	; 0x10d4 <MCAL_DIO_u8SetPinValue+0x182>
    107e:	2d 81       	ldd	r18, Y+5	; 0x05
    1080:	3e 81       	ldd	r19, Y+6	; 0x06
    1082:	22 30       	cpi	r18, 0x02	; 2
    1084:	31 05       	cpc	r19, r1
    1086:	2c f4       	brge	.+10     	; 0x1092 <MCAL_DIO_u8SetPinValue+0x140>
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	9e 81       	ldd	r25, Y+6	; 0x06
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	69 f0       	breq	.+26     	; 0x10aa <MCAL_DIO_u8SetPinValue+0x158>
    1090:	60 c0       	rjmp	.+192    	; 0x1152 <MCAL_DIO_u8SetPinValue+0x200>
    1092:	2d 81       	ldd	r18, Y+5	; 0x05
    1094:	3e 81       	ldd	r19, Y+6	; 0x06
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	89 f1       	breq	.+98     	; 0x10fe <MCAL_DIO_u8SetPinValue+0x1ac>
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	83 30       	cpi	r24, 0x03	; 3
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <MCAL_DIO_u8SetPinValue+0x156>
    10a6:	40 c0       	rjmp	.+128    	; 0x1128 <MCAL_DIO_u8SetPinValue+0x1d6>
    10a8:	54 c0       	rjmp	.+168    	; 0x1152 <MCAL_DIO_u8SetPinValue+0x200>

				case  DIO_U8PORTA: CLR_BIT(PORTA,copy_u8pin); break;
    10aa:	ab e3       	ldi	r26, 0x3B	; 59
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	eb e3       	ldi	r30, 0x3B	; 59
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <MCAL_DIO_u8SetPinValue+0x176>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <MCAL_DIO_u8SetPinValue+0x172>
    10cc:	80 95       	com	r24
    10ce:	84 23       	and	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	47 c0       	rjmp	.+142    	; 0x1162 <MCAL_DIO_u8SetPinValue+0x210>
				case  DIO_U8PORTB: CLR_BIT(PORTB,copy_u8pin); break;
    10d4:	a8 e3       	ldi	r26, 0x38	; 56
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e8 e3       	ldi	r30, 0x38	; 56
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <MCAL_DIO_u8SetPinValue+0x1a0>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <MCAL_DIO_u8SetPinValue+0x19c>
    10f6:	80 95       	com	r24
    10f8:	84 23       	and	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	32 c0       	rjmp	.+100    	; 0x1162 <MCAL_DIO_u8SetPinValue+0x210>
				case  DIO_U8PORTC: CLR_BIT(PORTC,copy_u8pin); break;
    10fe:	a5 e3       	ldi	r26, 0x35	; 53
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e5 e3       	ldi	r30, 0x35	; 53
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <MCAL_DIO_u8SetPinValue+0x1ca>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <MCAL_DIO_u8SetPinValue+0x1c6>
    1120:	80 95       	com	r24
    1122:	84 23       	and	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	1d c0       	rjmp	.+58     	; 0x1162 <MCAL_DIO_u8SetPinValue+0x210>
				case  DIO_U8PORTD: CLR_BIT(PORTD,copy_u8pin); break;
    1128:	a2 e3       	ldi	r26, 0x32	; 50
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e2 e3       	ldi	r30, 0x32	; 50
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <MCAL_DIO_u8SetPinValue+0x1f4>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <MCAL_DIO_u8SetPinValue+0x1f0>
    114a:	80 95       	com	r24
    114c:	84 23       	and	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	08 c0       	rjmp	.+16     	; 0x1162 <MCAL_DIO_u8SetPinValue+0x210>
				default :Local_ErrorState=1;break;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <MCAL_DIO_u8SetPinValue+0x210>
				}


			}
			else{
				Local_ErrorState=1;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <MCAL_DIO_u8SetPinValue+0x210>
				}
		}
		else{
			Local_ErrorState = 1;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	89 83       	std	Y+1, r24	; 0x01
		}

		return Local_ErrorState;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
}
    1164:	28 96       	adiw	r28, 0x08	; 8
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <MCAL_DIO_u8SetPortValue>:

u8 MCAL_DIO_u8SetPortValue(u8 copy_u8port, u8 copy_u8value){
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <MCAL_DIO_u8SetPortValue+0x6>
    117c:	00 d0       	rcall	.+0      	; 0x117e <MCAL_DIO_u8SetPortValue+0x8>
    117e:	0f 92       	push	r0
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	8a 83       	std	Y+2, r24	; 0x02
    1186:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_ErrorState = 0;
    1188:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8port){
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	3d 83       	std	Y+5, r19	; 0x05
    1192:	2c 83       	std	Y+4, r18	; 0x04
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	9d 81       	ldd	r25, Y+5	; 0x05
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	91 05       	cpc	r25, r1
    119c:	d1 f0       	breq	.+52     	; 0x11d2 <MCAL_DIO_u8SetPortValue+0x5c>
    119e:	2c 81       	ldd	r18, Y+4	; 0x04
    11a0:	3d 81       	ldd	r19, Y+5	; 0x05
    11a2:	22 30       	cpi	r18, 0x02	; 2
    11a4:	31 05       	cpc	r19, r1
    11a6:	2c f4       	brge	.+10     	; 0x11b2 <MCAL_DIO_u8SetPortValue+0x3c>
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	61 f0       	breq	.+24     	; 0x11c8 <MCAL_DIO_u8SetPortValue+0x52>
    11b0:	1f c0       	rjmp	.+62     	; 0x11f0 <MCAL_DIO_u8SetPortValue+0x7a>
    11b2:	2c 81       	ldd	r18, Y+4	; 0x04
    11b4:	3d 81       	ldd	r19, Y+5	; 0x05
    11b6:	22 30       	cpi	r18, 0x02	; 2
    11b8:	31 05       	cpc	r19, r1
    11ba:	81 f0       	breq	.+32     	; 0x11dc <MCAL_DIO_u8SetPortValue+0x66>
    11bc:	8c 81       	ldd	r24, Y+4	; 0x04
    11be:	9d 81       	ldd	r25, Y+5	; 0x05
    11c0:	83 30       	cpi	r24, 0x03	; 3
    11c2:	91 05       	cpc	r25, r1
    11c4:	81 f0       	breq	.+32     	; 0x11e6 <MCAL_DIO_u8SetPortValue+0x70>
    11c6:	14 c0       	rjmp	.+40     	; 0x11f0 <MCAL_DIO_u8SetPortValue+0x7a>

		case  DIO_U8PORTA: PORTA = copy_u8value; break;
    11c8:	eb e3       	ldi	r30, 0x3B	; 59
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	80 83       	st	Z, r24
    11d0:	11 c0       	rjmp	.+34     	; 0x11f4 <MCAL_DIO_u8SetPortValue+0x7e>
		case  DIO_U8PORTB: PORTB = copy_u8value; break;
    11d2:	e8 e3       	ldi	r30, 0x38	; 56
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	80 83       	st	Z, r24
    11da:	0c c0       	rjmp	.+24     	; 0x11f4 <MCAL_DIO_u8SetPortValue+0x7e>
		case  DIO_U8PORTC: PORTC = copy_u8value; break;
    11dc:	e5 e3       	ldi	r30, 0x35	; 53
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	80 83       	st	Z, r24
    11e4:	07 c0       	rjmp	.+14     	; 0x11f4 <MCAL_DIO_u8SetPortValue+0x7e>
		case  DIO_U8PORTD: PORTD = copy_u8value; break;
    11e6:	e2 e3       	ldi	r30, 0x32	; 50
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	80 83       	st	Z, r24
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <MCAL_DIO_u8SetPortValue+0x7e>
		default :Local_ErrorState=1; break;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01

		}
	return Local_ErrorState;
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <MCAL_DIO_u8GetPinValue>:

u8 MCAL_DIO_u8GetPinValue(u8 copy_u8port,u8 copy_u8pin,u8* copy_pu8value){
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	27 97       	sbiw	r28, 0x07	; 7
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	8a 83       	std	Y+2, r24	; 0x02
    121c:	6b 83       	std	Y+3, r22	; 0x03
    121e:	5d 83       	std	Y+5, r21	; 0x05
    1220:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_ErrorState = 0;
    1222:	19 82       	std	Y+1, r1	; 0x01

	if((copy_pu8value != NULL)&&(copy_u8pin<=DIO_U8PIN7)){
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	09 f4       	brne	.+2      	; 0x122e <MCAL_DIO_u8GetPinValue+0x28>
    122c:	78 c0       	rjmp	.+240    	; 0x131e <MCAL_DIO_u8GetPinValue+0x118>
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	88 30       	cpi	r24, 0x08	; 8
    1232:	08 f0       	brcs	.+2      	; 0x1236 <MCAL_DIO_u8GetPinValue+0x30>
    1234:	74 c0       	rjmp	.+232    	; 0x131e <MCAL_DIO_u8GetPinValue+0x118>

		switch(copy_u8port){
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	3f 83       	std	Y+7, r19	; 0x07
    123e:	2e 83       	std	Y+6, r18	; 0x06
    1240:	4e 81       	ldd	r20, Y+6	; 0x06
    1242:	5f 81       	ldd	r21, Y+7	; 0x07
    1244:	41 30       	cpi	r20, 0x01	; 1
    1246:	51 05       	cpc	r21, r1
    1248:	59 f1       	breq	.+86     	; 0x12a0 <MCAL_DIO_u8GetPinValue+0x9a>
    124a:	8e 81       	ldd	r24, Y+6	; 0x06
    124c:	9f 81       	ldd	r25, Y+7	; 0x07
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	91 05       	cpc	r25, r1
    1252:	34 f4       	brge	.+12     	; 0x1260 <MCAL_DIO_u8GetPinValue+0x5a>
    1254:	2e 81       	ldd	r18, Y+6	; 0x06
    1256:	3f 81       	ldd	r19, Y+7	; 0x07
    1258:	21 15       	cp	r18, r1
    125a:	31 05       	cpc	r19, r1
    125c:	69 f0       	breq	.+26     	; 0x1278 <MCAL_DIO_u8GetPinValue+0x72>
    125e:	5c c0       	rjmp	.+184    	; 0x1318 <MCAL_DIO_u8GetPinValue+0x112>
    1260:	4e 81       	ldd	r20, Y+6	; 0x06
    1262:	5f 81       	ldd	r21, Y+7	; 0x07
    1264:	42 30       	cpi	r20, 0x02	; 2
    1266:	51 05       	cpc	r21, r1
    1268:	79 f1       	breq	.+94     	; 0x12c8 <MCAL_DIO_u8GetPinValue+0xc2>
    126a:	8e 81       	ldd	r24, Y+6	; 0x06
    126c:	9f 81       	ldd	r25, Y+7	; 0x07
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <MCAL_DIO_u8GetPinValue+0x70>
    1274:	3d c0       	rjmp	.+122    	; 0x12f0 <MCAL_DIO_u8GetPinValue+0xea>
    1276:	50 c0       	rjmp	.+160    	; 0x1318 <MCAL_DIO_u8GetPinValue+0x112>

			case  DIO_U8PORTA: *copy_pu8value = GET_BIT(PINA,copy_u8pin); break;
    1278:	e9 e3       	ldi	r30, 0x39	; 57
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	88 2f       	mov	r24, r24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a9 01       	movw	r20, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <MCAL_DIO_u8GetPinValue+0x8a>
    128c:	55 95       	asr	r21
    128e:	47 95       	ror	r20
    1290:	8a 95       	dec	r24
    1292:	e2 f7       	brpl	.-8      	; 0x128c <MCAL_DIO_u8GetPinValue+0x86>
    1294:	ca 01       	movw	r24, r20
    1296:	81 70       	andi	r24, 0x01	; 1
    1298:	ec 81       	ldd	r30, Y+4	; 0x04
    129a:	fd 81       	ldd	r31, Y+5	; 0x05
    129c:	80 83       	st	Z, r24
    129e:	41 c0       	rjmp	.+130    	; 0x1322 <MCAL_DIO_u8GetPinValue+0x11c>
			case  DIO_U8PORTB: *copy_pu8value = GET_BIT(PINB,copy_u8pin); break;
    12a0:	e6 e3       	ldi	r30, 0x36	; 54
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a9 01       	movw	r20, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <MCAL_DIO_u8GetPinValue+0xb2>
    12b4:	55 95       	asr	r21
    12b6:	47 95       	ror	r20
    12b8:	8a 95       	dec	r24
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <MCAL_DIO_u8GetPinValue+0xae>
    12bc:	ca 01       	movw	r24, r20
    12be:	81 70       	andi	r24, 0x01	; 1
    12c0:	ec 81       	ldd	r30, Y+4	; 0x04
    12c2:	fd 81       	ldd	r31, Y+5	; 0x05
    12c4:	80 83       	st	Z, r24
    12c6:	2d c0       	rjmp	.+90     	; 0x1322 <MCAL_DIO_u8GetPinValue+0x11c>
			case  DIO_U8PORTC: *copy_pu8value = GET_BIT(PINC,copy_u8pin); break;
    12c8:	e3 e3       	ldi	r30, 0x33	; 51
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a9 01       	movw	r20, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <MCAL_DIO_u8GetPinValue+0xda>
    12dc:	55 95       	asr	r21
    12de:	47 95       	ror	r20
    12e0:	8a 95       	dec	r24
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <MCAL_DIO_u8GetPinValue+0xd6>
    12e4:	ca 01       	movw	r24, r20
    12e6:	81 70       	andi	r24, 0x01	; 1
    12e8:	ec 81       	ldd	r30, Y+4	; 0x04
    12ea:	fd 81       	ldd	r31, Y+5	; 0x05
    12ec:	80 83       	st	Z, r24
    12ee:	19 c0       	rjmp	.+50     	; 0x1322 <MCAL_DIO_u8GetPinValue+0x11c>
			case  DIO_U8PORTD: *copy_pu8value = GET_BIT(PIND,copy_u8pin); break;
    12f0:	e0 e3       	ldi	r30, 0x30	; 48
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 2f       	mov	r24, r24
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a9 01       	movw	r20, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <MCAL_DIO_u8GetPinValue+0x102>
    1304:	55 95       	asr	r21
    1306:	47 95       	ror	r20
    1308:	8a 95       	dec	r24
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <MCAL_DIO_u8GetPinValue+0xfe>
    130c:	ca 01       	movw	r24, r20
    130e:	81 70       	andi	r24, 0x01	; 1
    1310:	ec 81       	ldd	r30, Y+4	; 0x04
    1312:	fd 81       	ldd	r31, Y+5	; 0x05
    1314:	80 83       	st	Z, r24
    1316:	05 c0       	rjmp	.+10     	; 0x1322 <MCAL_DIO_u8GetPinValue+0x11c>
			default :Local_ErrorState=1; break;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <MCAL_DIO_u8GetPinValue+0x11c>
			}


	}
	else{
		Local_ErrorState = 1;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_ErrorState;
    1322:	89 81       	ldd	r24, Y+1	; 0x01

}
    1324:	27 96       	adiw	r28, 0x07	; 7
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <I2C_voidMasterInit>:
#include "I2C_Private.h"
#include "I2C_Interface.h"

#include "DIO_interface.h"

void I2C_voidMasterInit(SCL_FREQ_t SCL_FREQ){
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <I2C_voidMasterInit+0x6>
    133c:	0f 92       	push	r0
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	89 83       	std	Y+1, r24	; 0x01

	switch(SCL_FREQ){
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	3b 83       	std	Y+3, r19	; 0x03
    134c:	2a 83       	std	Y+2, r18	; 0x02
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	9b 81       	ldd	r25, Y+3	; 0x03
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	31 f0       	breq	.+12     	; 0x1362 <I2C_voidMasterInit+0x2c>
    1356:	2a 81       	ldd	r18, Y+2	; 0x02
    1358:	3b 81       	ldd	r19, Y+3	; 0x03
    135a:	21 30       	cpi	r18, 0x01	; 1
    135c:	31 05       	cpc	r19, r1
    135e:	a1 f0       	breq	.+40     	; 0x1388 <I2C_voidMasterInit+0x52>
    1360:	25 c0       	rjmp	.+74     	; 0x13ac <I2C_voidMasterInit+0x76>

	case SCL_100KHZ:

	    // Set prescaler == 1 (CLR TWSR 0,1)
	    CLR_BIT(TWSR_REG,TWSR_TWPS0);
    1362:	a1 e2       	ldi	r26, 0x21	; 33
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e1 e2       	ldi	r30, 0x21	; 33
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	8e 7f       	andi	r24, 0xFE	; 254
    136e:	8c 93       	st	X, r24
	    CLR_BIT(TWSR_REG,TWSR_TWPS1);
    1370:	a1 e2       	ldi	r26, 0x21	; 33
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e1 e2       	ldi	r30, 0x21	; 33
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	8d 7f       	andi	r24, 0xFD	; 253
    137c:	8c 93       	st	X, r24
	    // Set TWBR with value => 100 KHz ( TWBR = 72 )
	    TWBR_REG = 72;
    137e:	e0 e2       	ldi	r30, 0x20	; 32
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	88 e4       	ldi	r24, 0x48	; 72
    1384:	80 83       	st	Z, r24
    1386:	12 c0       	rjmp	.+36     	; 0x13ac <I2C_voidMasterInit+0x76>
		break;

	case SCL_400KHZ:

	    // Set prescaler == 1 (CLR TWSR 0,1)
	    CLR_BIT(TWSR_REG,TWSR_TWPS0);
    1388:	a1 e2       	ldi	r26, 0x21	; 33
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e1 e2       	ldi	r30, 0x21	; 33
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8e 7f       	andi	r24, 0xFE	; 254
    1394:	8c 93       	st	X, r24
	    CLR_BIT(TWSR_REG,TWSR_TWPS1);
    1396:	a1 e2       	ldi	r26, 0x21	; 33
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e1 e2       	ldi	r30, 0x21	; 33
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	8d 7f       	andi	r24, 0xFD	; 253
    13a2:	8c 93       	st	X, r24
	    // Set TWBR with value => 400 KHz ( TWBR = 12 )
	    TWBR_REG = 12;
    13a4:	e0 e2       	ldi	r30, 0x20	; 32
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	8c e0       	ldi	r24, 0x0C	; 12
    13aa:	80 83       	st	Z, r24
		break;

	}


}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <I2C_Master_u8SendSLA_Write_ACK>:

Error_t I2C_Master_u8SendSLA_Write_ACK (u8 Copy_u8SlaveAddress)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <I2C_Master_u8SendSLA_Write_ACK+0x6>
    13be:	0f 92       	push	r0
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	8b 83       	std	Y+3, r24	; 0x03
    Error_t Local_Error = I2C_NO_Error ;
    13c6:	19 82       	std	Y+1, r1	; 0x01

    // Write 7 bits slave address ( TWDR == address<<1 )
    //TWDR_REG = (Copy_u8SlaveAddress<<1) ;

    TWDR_REG = Copy_u8SlaveAddress;
    13c8:	e3 e2       	ldi	r30, 0x23	; 35
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	80 83       	st	Z, r24

    TWCR_REG = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    13d0:	e6 e5       	ldi	r30, 0x56	; 86
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	84 e8       	ldi	r24, 0x84	; 132
    13d6:	80 83       	st	Z, r24

    // Wait for flag ( TWCR 7 == 0 )
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );
    13d8:	e6 e5       	ldi	r30, 0x56	; 86
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	88 23       	and	r24, r24
    13e0:	dc f7       	brge	.-10     	; 0x13d8 <I2C_Master_u8SendSLA_Write_ACK+0x20>

    u8 status_val;

    getStatus(&status_val);
    13e2:	ce 01       	movw	r24, r28
    13e4:	02 96       	adiw	r24, 0x02	; 2
    13e6:	0e 94 ed 0a 	call	0x15da	; 0x15da <getStatus>

    // Check status code == SLA + Write + ACK == (0x18)
    if ( status_val != MASTER_SLA_Write_ACK )
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	88 31       	cpi	r24, 0x18	; 24
    13ee:	11 f0       	breq	.+4      	; 0x13f4 <I2C_Master_u8SendSLA_Write_ACK+0x3c>
    {
        Local_Error = I2C_Error_Master_SendSLA_Write_ACK ;
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <I2C_Master_u8WriteDataByte_ACK>:

/* this function should send 1 data byte to the other device */
Error_t I2C_Master_u8WriteDataByte_ACK(u8 copy_u8data){
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	00 d0       	rcall	.+0      	; 0x1408 <I2C_Master_u8WriteDataByte_ACK+0x6>
    1408:	0f 92       	push	r0
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	8b 83       	std	Y+3, r24	; 0x03

    Error_t Local_Error = I2C_NO_Error ;
    1410:	19 82       	std	Y+1, r1	; 0x01

    // Write data in TWDR
    TWDR_REG = copy_u8data ;
    1412:	e3 e2       	ldi	r30, 0x23	; 35
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	80 83       	st	Z, r24

    // clear interrupt flag
    TWCR_REG = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    141a:	e6 e5       	ldi	r30, 0x56	; 86
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	84 e8       	ldi	r24, 0x84	; 132
    1420:	80 83       	st	Z, r24

    u8 status_val;

    // Wait for flag ( TWCR 7 == 0 )
    while (!(TWCR_REG & (1<<TWCR_TWINT)));
    1422:	e6 e5       	ldi	r30, 0x56	; 86
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	88 23       	and	r24, r24
    142a:	dc f7       	brge	.-10     	; 0x1422 <I2C_Master_u8WriteDataByte_ACK+0x20>

    getStatus(&status_val);
    142c:	ce 01       	movw	r24, r28
    142e:	02 96       	adiw	r24, 0x02	; 2
    1430:	0e 94 ed 0a 	call	0x15da	; 0x15da <getStatus>

    // Check status code == Master Send Data + ACK == (0x28)
    if (  status_val != MASTER_WR_DataByte_ACK )
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	88 32       	cpi	r24, 0x28	; 40
    1438:	11 f0       	breq	.+4      	; 0x143e <I2C_Master_u8WriteDataByte_ACK+0x3c>
    {
        Local_Error = I2C_Error_Master_WriteDataByte_ACK ;
    143a:	87 e0       	ldi	r24, 0x07	; 7
    143c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_Error ;
    143e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <I2C_Master_u8StartCondition>:

/* this function should send start condition */
Error_t I2C_Master_u8StartCondition(void)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	00 d0       	rcall	.+0      	; 0x1452 <I2C_Master_u8StartCondition+0x6>
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    // Enable I2C  ( set TWCR 2 ) , Start condition ( Set TWCR 5) , Clear flag ( Set TWCR 7 )
	TWCR_REG = (1<<TWCR_TWINT)|(1<<TWCR_TWSTA)|(1<<TWCR_TWEN);
    1456:	e6 e5       	ldi	r30, 0x56	; 86
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	84 ea       	ldi	r24, 0xA4	; 164
    145c:	80 83       	st	Z, r24

	 while (!(TWCR_REG & (1<<TWCR_TWINT)));
    145e:	e6 e5       	ldi	r30, 0x56	; 86
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	88 23       	and	r24, r24
    1466:	dc f7       	brge	.-10     	; 0x145e <I2C_Master_u8StartCondition+0x12>

    Error_t Local_Error = I2C_NO_Error ;
    1468:	19 82       	std	Y+1, r1	; 0x01

    u8 status_val;

    getStatus(&status_val);
    146a:	ce 01       	movw	r24, r28
    146c:	02 96       	adiw	r24, 0x02	; 2
    146e:	0e 94 ed 0a 	call	0x15da	; 0x15da <getStatus>

    // Check status code == start condition ( TWSR & 0xf8 ) == 0x08
    if ( status_val != MASTER_START_ACK )
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	88 30       	cpi	r24, 0x08	; 8
    1476:	11 f0       	breq	.+4      	; 0x147c <I2C_Master_u8StartCondition+0x30>
    {
        Local_Error = I2C_Error_Master_StartCond_ACK ;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error;
    147c:	89 81       	ldd	r24, Y+1	; 0x01

}
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <I2C_Master_u8StopCondition>:

/* this function should send stop condition */
Error_t I2C_Master_u8StopCondition(void)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG = (1<<TWCR_TWINT)|(1<<TWCR_TWEN)|(1<<TWCR_TWSTO);
    1490:	e6 e5       	ldi	r30, 0x56	; 86
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	84 e9       	ldi	r24, 0x94	; 148
    1496:	80 83       	st	Z, r24

    return I2C_NO_Error;
    1498:	80 e0       	ldi	r24, 0x00	; 0

}
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <I2C_Master_u8ReadDataByte_ACK>:

/* this function should receive 1 byte and respond with ACK */
Error_t I2C_Master_u8ReadDataByte_ACK(u8 * ptr){
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <I2C_Master_u8ReadDataByte_ACK+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <I2C_Master_u8ReadDataByte_ACK+0x8>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	9c 83       	std	Y+4, r25	; 0x04
    14ae:	8b 83       	std	Y+3, r24	; 0x03

    // Enable ACK  ( Set TWCR 6 )
    SET_BIT(TWCR_REG,TWCR_TWEA);
    14b0:	a6 e5       	ldi	r26, 0x56	; 86
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e6 e5       	ldi	r30, 0x56	; 86
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	80 64       	ori	r24, 0x40	; 64
    14bc:	8c 93       	st	X, r24

    Error_t Local_Error = I2C_NO_Error ;
    14be:	19 82       	std	Y+1, r1	; 0x01

    u8 status_val;

    getStatus(&status_val);
    14c0:	ce 01       	movw	r24, r28
    14c2:	02 96       	adiw	r24, 0x02	; 2
    14c4:	0e 94 ed 0a 	call	0x15da	; 0x15da <getStatus>

    // Wait for flag ( TWCR 7 == 0 )
    while (!(TWCR_REG & (1<<TWCR_TWINT)));
    14c8:	e6 e5       	ldi	r30, 0x56	; 86
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	88 23       	and	r24, r24
    14d0:	dc f7       	brge	.-10     	; 0x14c8 <I2C_Master_u8ReadDataByte_ACK+0x28>

    // Check status code == Master Read Data + ACK == (0x50)
    if ( status_val != MASTER_RD_DataByte_ACK )
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	80 35       	cpi	r24, 0x50	; 80
    14d6:	11 f0       	breq	.+4      	; 0x14dc <I2C_Master_u8ReadDataByte_ACK+0x3c>
    {
        Local_Error = I2C_Error_Master_ReadDataByte_ACK ;
    14d8:	89 e0       	ldi	r24, 0x09	; 9
    14da:	89 83       	std	Y+1, r24	; 0x01
    }
    // Read Data From Register TWDR
    *ptr = TWDR_REG ;
    14dc:	e3 e2       	ldi	r30, 0x23	; 35
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	eb 81       	ldd	r30, Y+3	; 0x03
    14e4:	fc 81       	ldd	r31, Y+4	; 0x04
    14e6:	80 83       	st	Z, r24

    return Local_Error ;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01

}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <I2C_Master_u8ReadDataByte_NOTACK>:

/* this function should receive 1 byte and respond with NO ACK */
Error_t I2C_Master_u8ReadDataByte_NOTACK(u8 * ptr){
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <I2C_Master_u8ReadDataByte_NOTACK+0x6>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <I2C_Master_u8ReadDataByte_NOTACK+0x8>
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	9c 83       	std	Y+4, r25	; 0x04
    1506:	8b 83       	std	Y+3, r24	; 0x03

		// Disable ACK  ( CLR TWCR 6 )
		CLR_BIT(TWCR_REG,TWCR_TWEA);
    1508:	a6 e5       	ldi	r26, 0x56	; 86
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e6 e5       	ldi	r30, 0x56	; 86
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8f 7b       	andi	r24, 0xBF	; 191
    1514:	8c 93       	st	X, r24

		Error_t Local_Error = I2C_NO_Error ;
    1516:	19 82       	std	Y+1, r1	; 0x01

		u8 status_val;

	    // Wait for flag ( TWCR 7 == 0 )
	    while (!(TWCR_REG & (1<<TWCR_TWINT)));
    1518:	e6 e5       	ldi	r30, 0x56	; 86
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	88 23       	and	r24, r24
    1520:	dc f7       	brge	.-10     	; 0x1518 <I2C_Master_u8ReadDataByte_NOTACK+0x20>

		getStatus(&status_val);
    1522:	ce 01       	movw	r24, r28
    1524:	02 96       	adiw	r24, 0x02	; 2
    1526:	0e 94 ed 0a 	call	0x15da	; 0x15da <getStatus>

	    // Check status code == Master Read Data + NOTACK == (0x58)
	    if ( status_val != MASTER_RD_DataByte_NOTACK )
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	88 35       	cpi	r24, 0x58	; 88
    152e:	11 f0       	breq	.+4      	; 0x1534 <I2C_Master_u8ReadDataByte_NOTACK+0x3c>
	    {
	        Local_Error = I2C_Error_Master_ReadDataByte_NOTACK ;
    1530:	8a e0       	ldi	r24, 0x0A	; 10
    1532:	89 83       	std	Y+1, r24	; 0x01
	    }

	    // Read Data From Register TWDR
	    *ptr = TWDR_REG ;
    1534:	e3 e2       	ldi	r30, 0x23	; 35
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	eb 81       	ldd	r30, Y+3	; 0x03
    153c:	fc 81       	ldd	r31, Y+4	; 0x04
    153e:	80 83       	st	Z, r24

	    return Local_Error ;
    1540:	89 81       	ldd	r24, Y+1	; 0x01

}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <I2C_Master_u8ReStartCondition>:

Error_t I2C_Master_u8ReStartCondition(void)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <I2C_Master_u8ReStartCondition+0x6>
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    Error_t Local_Error = I2C_NO_Error ;
    155a:	19 82       	std	Y+1, r1	; 0x01

    // Enable I2C  ( set TWCR 2 ) , Start condition ( Set TWCR 5) , Clear flag ( Set TWCR 7 )
	TWCR_REG = (1<<TWCR_TWINT)|(1<<TWCR_TWSTA)|(1<<TWCR_TWEN);
    155c:	e6 e5       	ldi	r30, 0x56	; 86
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	84 ea       	ldi	r24, 0xA4	; 164
    1562:	80 83       	st	Z, r24


	u8 status_val;

	getStatus(&status_val);
    1564:	ce 01       	movw	r24, r28
    1566:	02 96       	adiw	r24, 0x02	; 2
    1568:	0e 94 ed 0a 	call	0x15da	; 0x15da <getStatus>

	 // Wait for flag ( TWCR 7 == 0 )
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );
    156c:	e6 e5       	ldi	r30, 0x56	; 86
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	88 23       	and	r24, r24
    1574:	dc f7       	brge	.-10     	; 0x156c <I2C_Master_u8ReStartCondition+0x1c>

    // Check status code == Repeat condition ( TWSR & 0xf8 ) == 0x10
    if ( status_val != MASTER_REP_START_ACK )
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	80 31       	cpi	r24, 0x10	; 16
    157a:	11 f0       	breq	.+4      	; 0x1580 <I2C_Master_u8ReStartCondition+0x30>
    {
        Local_Error = I2C_Error_Master_ReStartCond_ACK ;
    157c:	82 e0       	ldi	r24, 0x02	; 2
    157e:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    1580:	89 81       	ldd	r24, Y+1	; 0x01
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <I2C_Master_u8SendSLA_Read_ACK>:


Error_t I2C_Master_u8SendSLA_Read_ACK (u8 Copy_u8SlaveAddress)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <I2C_Master_u8SendSLA_Read_ACK+0x6>
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	8a 83       	std	Y+2, r24	; 0x02
    Error_t Local_Error = I2C_NO_Error ;
    1598:	19 82       	std	Y+1, r1	; 0x01

    // Write 7 bits slave address ( TWDR == address<<1 )
    TWDR_REG = (Copy_u8SlaveAddress<<1) ;
    159a:	e3 e2       	ldi	r30, 0x23	; 35
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	88 0f       	add	r24, r24
    15a2:	80 83       	st	Z, r24

    // Read condition ( SET TWDR 0 )
    TWCR_REG = (1<<TWCR_TWINT) | (1<<TWDR_TWD0);
    15a4:	e6 e5       	ldi	r30, 0x56	; 86
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	81 e8       	ldi	r24, 0x81	; 129
    15aa:	80 83       	st	Z, r24

    // Wait for flag ( TWCR 7 == 0 )
    while( ( GET_BIT(TWCR_REG,TWCR_TWINT) ) == 0 );
    15ac:	e6 e5       	ldi	r30, 0x56	; 86
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	88 23       	and	r24, r24
    15b4:	dc f7       	brge	.-10     	; 0x15ac <I2C_Master_u8SendSLA_Read_ACK+0x20>

    // Check status code == SLA + Read + ACK == (0x40)
    if ( (TWSR_REG & STATUS_BIT_MASK) != MASTER_SLA_Read_ACK )
    15b6:	e1 e2       	ldi	r30, 0x21	; 33
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	88 2f       	mov	r24, r24
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	88 7f       	andi	r24, 0xF8	; 248
    15c2:	90 70       	andi	r25, 0x00	; 0
    15c4:	80 34       	cpi	r24, 0x40	; 64
    15c6:	91 05       	cpc	r25, r1
    15c8:	11 f0       	breq	.+4      	; 0x15ce <I2C_Master_u8SendSLA_Read_ACK+0x42>
    {
        Local_Error = I2C_Error_Master_SendSLA_Read_ACK ;
    15ca:	85 e0       	ldi	r24, 0x05	; 5
    15cc:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_Error ;
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <getStatus>:
/* this function should read status of status register */
void getStatus(u8* status ){
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <getStatus+0x6>
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	9a 83       	std	Y+2, r25	; 0x02
    15e6:	89 83       	std	Y+1, r24	; 0x01

	*status = (TWSR_REG & STATUS_BIT_MASK);
    15e8:	e1 e2       	ldi	r30, 0x21	; 33
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	88 7f       	andi	r24, 0xF8	; 248
    15f0:	e9 81       	ldd	r30, Y+1	; 0x01
    15f2:	fa 81       	ldd	r31, Y+2	; 0x02
    15f4:	80 83       	st	Z, r24
}
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <PORT_voidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"



void PORT_voidInit(void){
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
	
	DDRA = PORTA_DIR;
    1608:	ea e3       	ldi	r30, 0x3A	; 58
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 e7       	ldi	r24, 0x70	; 112
    160e:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1610:	e7 e3       	ldi	r30, 0x37	; 55
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 e8       	ldi	r24, 0x80	; 128
    1616:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1618:	e4 e3       	ldi	r30, 0x34	; 52
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
    161e:	e1 e3       	ldi	r30, 0x31	; 49
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	10 82       	st	Z, r1
	
	PORTA = PORTA_Inital_Value;
    1624:	eb e3       	ldi	r30, 0x3B	; 59
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	87 e0       	ldi	r24, 0x07	; 7
    162a:	80 83       	st	Z, r24
	PORTB = PORTB_Inital_Value;
    162c:	e8 e3       	ldi	r30, 0x38	; 56
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	10 82       	st	Z, r1
	PORTC = PORTC_Inital_Value;
    1632:	e5 e3       	ldi	r30, 0x35	; 53
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	10 82       	st	Z, r1
	PORTD = PORTD_Inital_Value;
    1638:	e2 e3       	ldi	r30, 0x32	; 50
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	10 82       	st	Z, r1
}
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <RTC_voidInit>:

time_t time_res;
year_t date_res;

/* this function should initialize TWI with the speed required to operate RTC -> */
void RTC_voidInit(void){
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62

	/* enable the oscillator (CH bit = 0) during initial configuration */
	I2C_voidMasterInit(SCL_100KHZ);
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	0e 94 9b 09 	call	0x1336	; 0x1336 <I2C_voidMasterInit>
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <RTC_voidSetTime>:

/* this function should take time in (hours minutes seconds )and if the time is (AM or PM),
   it should configure RTC initial time with it ->*/
void RTC_voidSetTime(time_t* copy_time){
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	00 d0       	rcall	.+0      	; 0x165e <RTC_voidSetTime+0x6>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <RTC_voidSetTime+0x8>
    1660:	0f 92       	push	r0
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	9d 83       	std	Y+5, r25	; 0x05
    1668:	8c 83       	std	Y+4, r24	; 0x04

	// algorithm to send data
	u8 sec_res_send = RTC_TimeSecFormat(copy_time->second);
    166a:	ec 81       	ldd	r30, Y+4	; 0x04
    166c:	fd 81       	ldd	r31, Y+5	; 0x05
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	0e 94 8d 0c 	call	0x191a	; 0x191a <RTC_TimeSecFormat>
    1674:	8b 83       	std	Y+3, r24	; 0x03
	u8 min_res_send = RTC_TimeMinFormat(copy_time->minute);
    1676:	ec 81       	ldd	r30, Y+4	; 0x04
    1678:	fd 81       	ldd	r31, Y+5	; 0x05
    167a:	81 81       	ldd	r24, Z+1	; 0x01
    167c:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <RTC_TimeMinFormat>
    1680:	8a 83       	std	Y+2, r24	; 0x02
	u8 HR_res_send =  RTC_TimeHrFormat(copy_time->hour,copy_time->time_format,copy_time->time_mode);
    1682:	ec 81       	ldd	r30, Y+4	; 0x04
    1684:	fd 81       	ldd	r31, Y+5	; 0x05
    1686:	80 81       	ld	r24, Z
    1688:	ec 81       	ldd	r30, Y+4	; 0x04
    168a:	fd 81       	ldd	r31, Y+5	; 0x05
    168c:	23 81       	ldd	r18, Z+3	; 0x03
    168e:	ec 81       	ldd	r30, Y+4	; 0x04
    1690:	fd 81       	ldd	r31, Y+5	; 0x05
    1692:	94 81       	ldd	r25, Z+4	; 0x04
    1694:	62 2f       	mov	r22, r18
    1696:	49 2f       	mov	r20, r25
    1698:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <RTC_TimeHrFormat>
    169c:	89 83       	std	Y+1, r24	; 0x01

	/* start sending data */

	I2C_Master_u8StartCondition();
    169e:	0e 94 26 0a 	call	0x144c	; 0x144c <I2C_Master_u8StartCondition>

	I2C_Master_u8WriteDataByte_ACK(0xD0);
    16a2:	80 ed       	ldi	r24, 0xD0	; 208
    16a4:	0e 94 01 0a 	call	0x1402	; 0x1402 <I2C_Master_u8WriteDataByte_ACK>

	I2C_Master_u8WriteDataByte_ACK(0x00);
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	0e 94 01 0a 	call	0x1402	; 0x1402 <I2C_Master_u8WriteDataByte_ACK>

	I2C_Master_u8WriteDataByte_ACK(sec_res_send);
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	0e 94 01 0a 	call	0x1402	; 0x1402 <I2C_Master_u8WriteDataByte_ACK>

	I2C_Master_u8WriteDataByte_ACK(min_res_send);
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	0e 94 01 0a 	call	0x1402	; 0x1402 <I2C_Master_u8WriteDataByte_ACK>

	I2C_Master_u8WriteDataByte_ACK(HR_res_send);
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	0e 94 01 0a 	call	0x1402	; 0x1402 <I2C_Master_u8WriteDataByte_ACK>

	I2C_Master_u8StopCondition();
    16c0:	0e 94 44 0a 	call	0x1488	; 0x1488 <I2C_Master_u8StopCondition>
}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <RTC_GetTime>:

/* this function should return the time in (hours minutes seconds) and if the time is (AM or PM)-> */
time_t  RTC_GetTime(void){
    16d4:	af 92       	push	r10
    16d6:	bf 92       	push	r11
    16d8:	cf 92       	push	r12
    16da:	df 92       	push	r13
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	66 97       	sbiw	r28, 0x16	; 22
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61

	/* start Receiving data */

	I2C_Master_u8StartCondition();
    16f8:	0e 94 26 0a 	call	0x144c	; 0x144c <I2C_Master_u8StartCondition>

	I2C_Master_u8WriteDataByte_ACK(0xD1);
    16fc:	81 ed       	ldi	r24, 0xD1	; 209
    16fe:	0e 94 01 0a 	call	0x1402	; 0x1402 <I2C_Master_u8WriteDataByte_ACK>

	u8 ptr_time_receive;

	I2C_Master_u8ReadDataByte_ACK(&ptr_time_receive);
    1702:	ce 01       	movw	r24, r28
    1704:	09 96       	adiw	r24, 0x09	; 9
    1706:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <I2C_Master_u8ReadDataByte_ACK>

	u8 time_sec = ptr_time_receive;
    170a:	89 85       	ldd	r24, Y+9	; 0x09
    170c:	8b 83       	std	Y+3, r24	; 0x03

	I2C_Master_u8ReadDataByte_ACK(&ptr_time_receive);
    170e:	ce 01       	movw	r24, r28
    1710:	09 96       	adiw	r24, 0x09	; 9
    1712:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <I2C_Master_u8ReadDataByte_ACK>

	u8 time_min = ptr_time_receive;
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	8a 83       	std	Y+2, r24	; 0x02

	I2C_Master_u8ReadDataByte_NOTACK(&ptr_time_receive);
    171a:	ce 01       	movw	r24, r28
    171c:	09 96       	adiw	r24, 0x09	; 9
    171e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <I2C_Master_u8ReadDataByte_NOTACK>

	u8 time_HR = ptr_time_receive;
    1722:	89 85       	ldd	r24, Y+9	; 0x09
    1724:	89 83       	std	Y+1, r24	; 0x01

	I2C_Master_u8StopCondition();
    1726:	0e 94 44 0a 	call	0x1488	; 0x1488 <I2C_Master_u8StopCondition>

	/* Data handling to return time */

	time_res.second = time_sec;
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	80 93 ae 00 	sts	0x00AE, r24

	time_res.minute = time_min;
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	80 93 ad 00 	sts	0x00AD, r24

	time_res.hour = time_HR;
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	80 93 ac 00 	sts	0x00AC, r24

	if( (GET_BIT(time_HR,6) == 1) ){
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	82 95       	swap	r24
    1740:	86 95       	lsr	r24
    1742:	86 95       	lsr	r24
    1744:	83 70       	andi	r24, 0x03	; 3
    1746:	88 2f       	mov	r24, r24
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	81 70       	andi	r24, 0x01	; 1
    174c:	90 70       	andi	r25, 0x00	; 0
    174e:	88 23       	and	r24, r24
    1750:	81 f0       	breq	.+32     	; 0x1772 <RTC_GetTime+0x9e>

		time_res.time_format = time_format_12;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	80 93 af 00 	sts	0x00AF, r24

		if( (GET_BIT(time_HR,5) == 1) ){
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	82 95       	swap	r24
    175c:	86 95       	lsr	r24
    175e:	87 70       	andi	r24, 0x07	; 7
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	81 70       	andi	r24, 0x01	; 1
    1766:	90 70       	andi	r25, 0x00	; 0
    1768:	88 23       	and	r24, r24
    176a:	19 f0       	breq	.+6      	; 0x1772 <RTC_GetTime+0x9e>

			time_res.time_mode = PM;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	80 93 b0 00 	sts	0x00B0, r24

		time_res.time_format = time_format_24;
		time_res.time_mode = No_TYPE;
	}

	return time_res;
    1772:	ce 01       	movw	r24, r28
    1774:	04 96       	adiw	r24, 0x04	; 4
    1776:	9b 87       	std	Y+11, r25	; 0x0b
    1778:	8a 87       	std	Y+10, r24	; 0x0a
    177a:	ec ea       	ldi	r30, 0xAC	; 172
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	fd 87       	std	Y+13, r31	; 0x0d
    1780:	ec 87       	std	Y+12, r30	; 0x0c
    1782:	f5 e0       	ldi	r31, 0x05	; 5
    1784:	fe 87       	std	Y+14, r31	; 0x0e
    1786:	ec 85       	ldd	r30, Y+12	; 0x0c
    1788:	fd 85       	ldd	r31, Y+13	; 0x0d
    178a:	00 80       	ld	r0, Z
    178c:	8c 85       	ldd	r24, Y+12	; 0x0c
    178e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	9d 87       	std	Y+13, r25	; 0x0d
    1794:	8c 87       	std	Y+12, r24	; 0x0c
    1796:	ea 85       	ldd	r30, Y+10	; 0x0a
    1798:	fb 85       	ldd	r31, Y+11	; 0x0b
    179a:	00 82       	st	Z, r0
    179c:	8a 85       	ldd	r24, Y+10	; 0x0a
    179e:	9b 85       	ldd	r25, Y+11	; 0x0b
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	9b 87       	std	Y+11, r25	; 0x0b
    17a4:	8a 87       	std	Y+10, r24	; 0x0a
    17a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a8:	91 50       	subi	r25, 0x01	; 1
    17aa:	9e 87       	std	Y+14, r25	; 0x0e
    17ac:	ee 85       	ldd	r30, Y+14	; 0x0e
    17ae:	ee 23       	and	r30, r30
    17b0:	51 f7       	brne	.-44     	; 0x1786 <RTC_GetTime+0xb2>
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	2c 81       	ldd	r18, Y+4	; 0x04
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	4e 81       	ldd	r20, Y+6	; 0x06
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	8f 81       	ldd	r24, Y+7	; 0x07
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	98 85       	ldd	r25, Y+8	; 0x08
    17c6:	2f 87       	std	Y+15, r18	; 0x0f
    17c8:	38 8b       	std	Y+16, r19	; 0x10
    17ca:	49 8b       	std	Y+17, r20	; 0x11
    17cc:	8a 8b       	std	Y+18, r24	; 0x12
    17ce:	9b 8b       	std	Y+19, r25	; 0x13
    17d0:	af 84       	ldd	r10, Y+15	; 0x0f
    17d2:	b8 88       	ldd	r11, Y+16	; 0x10
    17d4:	c9 88       	ldd	r12, Y+17	; 0x11
    17d6:	da 88       	ldd	r13, Y+18	; 0x12
    17d8:	eb 88       	ldd	r14, Y+19	; 0x13
    17da:	fc 88       	ldd	r15, Y+20	; 0x14
    17dc:	0d 89       	ldd	r16, Y+21	; 0x15
    17de:	1e 89       	ldd	r17, Y+22	; 0x16
}
    17e0:	2a 2d       	mov	r18, r10
    17e2:	3b 2d       	mov	r19, r11
    17e4:	4c 2d       	mov	r20, r12
    17e6:	5d 2d       	mov	r21, r13
    17e8:	6e 2d       	mov	r22, r14
    17ea:	7f 2d       	mov	r23, r15
    17ec:	80 2f       	mov	r24, r16
    17ee:	91 2f       	mov	r25, r17
    17f0:	66 96       	adiw	r28, 0x16	; 22
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	df 90       	pop	r13
    180a:	cf 90       	pop	r12
    180c:	bf 90       	pop	r11
    180e:	af 90       	pop	r10
    1810:	08 95       	ret

00001812 <RTC_SetDate>:

/* this function should take date in (year month day )and should configure RTC with it -> */
void RTC_SetDate(year_t* copy_year){
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	00 d0       	rcall	.+0      	; 0x1818 <RTC_SetDate+0x6>
    1818:	00 d0       	rcall	.+0      	; 0x181a <RTC_SetDate+0x8>
    181a:	00 d0       	rcall	.+0      	; 0x181c <RTC_SetDate+0xa>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	8d 83       	std	Y+5, r24	; 0x05

	/* Data year handling */

   u8 day_res_send = RTC_dayFormat(copy_year->day);
    1824:	ed 81       	ldd	r30, Y+5	; 0x05
    1826:	fe 81       	ldd	r31, Y+6	; 0x06
    1828:	83 81       	ldd	r24, Z+3	; 0x03
    182a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <RTC_dayFormat>
    182e:	8c 83       	std	Y+4, r24	; 0x04

   u8 date_res_send = RTC_dateFormat(copy_year->date);
    1830:	ed 81       	ldd	r30, Y+5	; 0x05
    1832:	fe 81       	ldd	r31, Y+6	; 0x06
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <RTC_dateFormat>
    183a:	8b 83       	std	Y+3, r24	; 0x03

   u8 month_res_send = RTC_MonthFormat(copy_year->month);
    183c:	ed 81       	ldd	r30, Y+5	; 0x05
    183e:	fe 81       	ldd	r31, Y+6	; 0x06
    1840:	81 81       	ldd	r24, Z+1	; 0x01
    1842:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <RTC_MonthFormat>
    1846:	8a 83       	std	Y+2, r24	; 0x02

   u8 year_res_send = RTC_yearFormat(copy_year->year);
    1848:	ed 81       	ldd	r30, Y+5	; 0x05
    184a:	fe 81       	ldd	r31, Y+6	; 0x06
    184c:	80 81       	ld	r24, Z
    184e:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <RTC_yearFormat>
    1852:	89 83       	std	Y+1, r24	; 0x01


   /* start sending data */

	I2C_Master_u8StartCondition();
    1854:	0e 94 26 0a 	call	0x144c	; 0x144c <I2C_Master_u8StartCondition>

	I2C_Master_u8WriteDataByte_ACK(0xD0);
    1858:	80 ed       	ldi	r24, 0xD0	; 208
    185a:	0e 94 01 0a 	call	0x1402	; 0x1402 <I2C_Master_u8WriteDataByte_ACK>

	I2C_Master_u8WriteDataByte_ACK(0x03);
    185e:	83 e0       	ldi	r24, 0x03	; 3
    1860:	0e 94 01 0a 	call	0x1402	; 0x1402 <I2C_Master_u8WriteDataByte_ACK>

	I2C_Master_u8WriteDataByte_ACK(day_res_send);
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	0e 94 01 0a 	call	0x1402	; 0x1402 <I2C_Master_u8WriteDataByte_ACK>

	I2C_Master_u8WriteDataByte_ACK(date_res_send);
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	0e 94 01 0a 	call	0x1402	; 0x1402 <I2C_Master_u8WriteDataByte_ACK>

	I2C_Master_u8WriteDataByte_ACK(month_res_send);
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	0e 94 01 0a 	call	0x1402	; 0x1402 <I2C_Master_u8WriteDataByte_ACK>

	I2C_Master_u8WriteDataByte_ACK(year_res_send);
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	0e 94 01 0a 	call	0x1402	; 0x1402 <I2C_Master_u8WriteDataByte_ACK>

	I2C_Master_u8StopCondition();
    187c:	0e 94 44 0a 	call	0x1488	; 0x1488 <I2C_Master_u8StopCondition>


}
    1880:	26 96       	adiw	r28, 0x06	; 6
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <RTC_GetDate>:

/* this function should return the data in (year month day)-> */
year_t  RTC_GetDate(void){
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	00 d0       	rcall	.+0      	; 0x1898 <RTC_GetDate+0x6>
    1898:	00 d0       	rcall	.+0      	; 0x189a <RTC_GetDate+0x8>
    189a:	0f 92       	push	r0
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62


	/* start Receiving data */

	I2C_Master_u8StartCondition();
    18a0:	0e 94 26 0a 	call	0x144c	; 0x144c <I2C_Master_u8StartCondition>

	I2C_Master_u8WriteDataByte_ACK(0xD1);
    18a4:	81 ed       	ldi	r24, 0xD1	; 209
    18a6:	0e 94 01 0a 	call	0x1402	; 0x1402 <I2C_Master_u8WriteDataByte_ACK>

	u8 ptr_date_receive;

	I2C_Master_u8ReadDataByte_ACK(&ptr_date_receive);
    18aa:	ce 01       	movw	r24, r28
    18ac:	05 96       	adiw	r24, 0x05	; 5
    18ae:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <I2C_Master_u8ReadDataByte_ACK>

	u8 date_day = ptr_date_receive;
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	8c 83       	std	Y+4, r24	; 0x04

	I2C_Master_u8ReadDataByte_ACK(&ptr_date_receive);
    18b6:	ce 01       	movw	r24, r28
    18b8:	05 96       	adiw	r24, 0x05	; 5
    18ba:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <I2C_Master_u8ReadDataByte_ACK>

	u8 date = ptr_date_receive;
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	8b 83       	std	Y+3, r24	; 0x03

	I2C_Master_u8ReadDataByte_ACK(&ptr_date_receive);
    18c2:	ce 01       	movw	r24, r28
    18c4:	05 96       	adiw	r24, 0x05	; 5
    18c6:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <I2C_Master_u8ReadDataByte_ACK>

	u8 date_month = ptr_date_receive;
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	8a 83       	std	Y+2, r24	; 0x02

	I2C_Master_u8ReadDataByte_NOTACK(&ptr_date_receive);
    18ce:	ce 01       	movw	r24, r28
    18d0:	05 96       	adiw	r24, 0x05	; 5
    18d2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <I2C_Master_u8ReadDataByte_NOTACK>

	u8 date_year = ptr_date_receive;
    18d6:	8d 81       	ldd	r24, Y+5	; 0x05
    18d8:	89 83       	std	Y+1, r24	; 0x01

	I2C_Master_u8StopCondition();
    18da:	0e 94 44 0a 	call	0x1488	; 0x1488 <I2C_Master_u8StopCondition>

	/* Data handling to return date */

	date_res.day = date_day;
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	80 93 ab 00 	sts	0x00AB, r24
	date_res.date = date;
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	80 93 aa 00 	sts	0x00AA, r24
	date_res.month = date_month;
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	80 93 a9 00 	sts	0x00A9, r24
	date_res.year = date_year;
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	80 93 a8 00 	sts	0x00A8, r24

	return date_res;
    18f6:	80 91 a8 00 	lds	r24, 0x00A8
    18fa:	90 91 a9 00 	lds	r25, 0x00A9
    18fe:	a0 91 aa 00 	lds	r26, 0x00AA
    1902:	b0 91 ab 00 	lds	r27, 0x00AB

}
    1906:	bc 01       	movw	r22, r24
    1908:	cd 01       	movw	r24, r26
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <RTC_TimeSecFormat>:

u8 RTC_TimeSecFormat(u8 copy_time_sec){
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	00 d0       	rcall	.+0      	; 0x1920 <RTC_TimeSecFormat+0x6>
    1920:	00 d0       	rcall	.+0      	; 0x1922 <RTC_TimeSecFormat+0x8>
    1922:	00 d0       	rcall	.+0      	; 0x1924 <RTC_TimeSecFormat+0xa>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	8e 83       	std	Y+6, r24	; 0x06

	u8 local_sec_time = 0;
    192a:	1b 82       	std	Y+3, r1	; 0x03

	CLR_BIT(local_sec_time,7);
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	8f 77       	andi	r24, 0x7F	; 127
    1930:	8b 83       	std	Y+3, r24	; 0x03

	u8 Sec_format[2];

	u8 temp = copy_time_sec;
    1932:	8e 81       	ldd	r24, Y+6	; 0x06
    1934:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 i=0;i<2;i++){
    1936:	19 82       	std	Y+1, r1	; 0x01
    1938:	19 c0       	rjmp	.+50     	; 0x196c <RTC_TimeSecFormat+0x52>

		Sec_format[i] = temp % 10;
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	48 2f       	mov	r20, r24
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	9a e0       	ldi	r25, 0x0A	; 10
    1944:	69 2f       	mov	r22, r25
    1946:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodqi4>
    194a:	89 2f       	mov	r24, r25
    194c:	28 2f       	mov	r18, r24
    194e:	ce 01       	movw	r24, r28
    1950:	04 96       	adiw	r24, 0x04	; 4
    1952:	fc 01       	movw	r30, r24
    1954:	e4 0f       	add	r30, r20
    1956:	f5 1f       	adc	r31, r21
    1958:	20 83       	st	Z, r18

		temp = temp / 10;
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	9a e0       	ldi	r25, 0x0A	; 10
    195e:	69 2f       	mov	r22, r25
    1960:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodqi4>
    1964:	8a 83       	std	Y+2, r24	; 0x02

	u8 Sec_format[2];

	u8 temp = copy_time_sec;

	for(u8 i=0;i<2;i++){
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	8f 5f       	subi	r24, 0xFF	; 255
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	82 30       	cpi	r24, 0x02	; 2
    1970:	20 f3       	brcs	.-56     	; 0x193a <RTC_TimeSecFormat+0x20>
//
//		 u8 mask2 = 0b01110000;
//
//		 local_sec_time |= (mask2 & sec_format[1]);

	local_sec_time |=  Sec_format[0]  | ( Sec_format[1]<<4);
    1972:	8c 81       	ldd	r24, Y+4	; 0x04
    1974:	28 2f       	mov	r18, r24
    1976:	8d 81       	ldd	r24, Y+5	; 0x05
    1978:	88 2f       	mov	r24, r24
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	82 95       	swap	r24
    197e:	92 95       	swap	r25
    1980:	90 7f       	andi	r25, 0xF0	; 240
    1982:	98 27       	eor	r25, r24
    1984:	80 7f       	andi	r24, 0xF0	; 240
    1986:	98 27       	eor	r25, r24
    1988:	92 2f       	mov	r25, r18
    198a:	98 2b       	or	r25, r24
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	89 2b       	or	r24, r25
    1990:	8b 83       	std	Y+3, r24	; 0x03

	return local_sec_time;
    1992:	8b 81       	ldd	r24, Y+3	; 0x03


}
    1994:	26 96       	adiw	r28, 0x06	; 6
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <RTC_TimeMinFormat>:

u8 RTC_TimeMinFormat(u8 copy_time_min){
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <RTC_TimeMinFormat+0x6>
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <RTC_TimeMinFormat+0x8>
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <RTC_TimeMinFormat+0xa>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	8e 83       	std	Y+6, r24	; 0x06

	u8 local_Min_time = 0;
    19b6:	1b 82       	std	Y+3, r1	; 0x03

	CLR_BIT(local_Min_time,7);
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	8f 77       	andi	r24, 0x7F	; 127
    19bc:	8b 83       	std	Y+3, r24	; 0x03

	u8 Min_format[2];

	u8 temp = copy_time_min;
    19be:	8e 81       	ldd	r24, Y+6	; 0x06
    19c0:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 i=0;i<2;i++){
    19c2:	19 82       	std	Y+1, r1	; 0x01
    19c4:	19 c0       	rjmp	.+50     	; 0x19f8 <RTC_TimeMinFormat+0x52>

		Min_format[i] = temp % 10;
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	48 2f       	mov	r20, r24
    19ca:	50 e0       	ldi	r21, 0x00	; 0
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	9a e0       	ldi	r25, 0x0A	; 10
    19d0:	69 2f       	mov	r22, r25
    19d2:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodqi4>
    19d6:	89 2f       	mov	r24, r25
    19d8:	28 2f       	mov	r18, r24
    19da:	ce 01       	movw	r24, r28
    19dc:	04 96       	adiw	r24, 0x04	; 4
    19de:	fc 01       	movw	r30, r24
    19e0:	e4 0f       	add	r30, r20
    19e2:	f5 1f       	adc	r31, r21
    19e4:	20 83       	st	Z, r18

		temp = temp / 10;
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	9a e0       	ldi	r25, 0x0A	; 10
    19ea:	69 2f       	mov	r22, r25
    19ec:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodqi4>
    19f0:	8a 83       	std	Y+2, r24	; 0x02

	u8 Min_format[2];

	u8 temp = copy_time_min;

	for(u8 i=0;i<2;i++){
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	8f 5f       	subi	r24, 0xFF	; 255
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	82 30       	cpi	r24, 0x02	; 2
    19fc:	20 f3       	brcs	.-56     	; 0x19c6 <RTC_TimeMinFormat+0x20>
	//
	//	 u8 mask2 = 0b01110000;
	//
	//	 local_Min_time |= (mask2 & Min_format[1]);

	local_Min_time = ( Min_format[0] | ( Min_format[1] <<4) );
    19fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1a00:	28 2f       	mov	r18, r24
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	82 95       	swap	r24
    1a0a:	92 95       	swap	r25
    1a0c:	90 7f       	andi	r25, 0xF0	; 240
    1a0e:	98 27       	eor	r25, r24
    1a10:	80 7f       	andi	r24, 0xF0	; 240
    1a12:	98 27       	eor	r25, r24
    1a14:	82 2b       	or	r24, r18
    1a16:	8b 83       	std	Y+3, r24	; 0x03

	return local_Min_time;
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1a1a:	26 96       	adiw	r28, 0x06	; 6
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <RTC_TimeHrFormat>:

u8 RTC_TimeHrFormat(u8 copy_time_HR , u8 copy_time_format, u8 copy_time_mode){
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	2c 97       	sbiw	r28, 0x0c	; 12
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	8e 83       	std	Y+6, r24	; 0x06
    1a42:	6f 83       	std	Y+7, r22	; 0x07
    1a44:	48 87       	std	Y+8, r20	; 0x08

	u8 local_HR_time =0;
    1a46:	1b 82       	std	Y+3, r1	; 0x03

	CLR_BIT(local_HR_time,7);
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	8f 77       	andi	r24, 0x7F	; 127
    1a4c:	8b 83       	std	Y+3, r24	; 0x03

	u8 HR_format[2];

	u8 temp = copy_time_HR;
    1a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a50:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 i=0;i<2;i++){
    1a52:	19 82       	std	Y+1, r1	; 0x01
    1a54:	19 c0       	rjmp	.+50     	; 0x1a88 <RTC_TimeHrFormat+0x5c>

		HR_format[i] = temp % 10;
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	48 2f       	mov	r20, r24
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	9a e0       	ldi	r25, 0x0A	; 10
    1a60:	69 2f       	mov	r22, r25
    1a62:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodqi4>
    1a66:	89 2f       	mov	r24, r25
    1a68:	28 2f       	mov	r18, r24
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	04 96       	adiw	r24, 0x04	; 4
    1a6e:	fc 01       	movw	r30, r24
    1a70:	e4 0f       	add	r30, r20
    1a72:	f5 1f       	adc	r31, r21
    1a74:	20 83       	st	Z, r18

		temp = temp / 10;
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	9a e0       	ldi	r25, 0x0A	; 10
    1a7a:	69 2f       	mov	r22, r25
    1a7c:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodqi4>
    1a80:	8a 83       	std	Y+2, r24	; 0x02

	u8 HR_format[2];

	u8 temp = copy_time_HR;

	for(u8 i=0;i<2;i++){
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	8f 5f       	subi	r24, 0xFF	; 255
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	20 f3       	brcs	.-56     	; 0x1a56 <RTC_TimeHrFormat+0x2a>
		HR_format[i] = temp % 10;

		temp = temp / 10;
	}

	switch(copy_time_format){
    1a8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	3c 87       	std	Y+12, r19	; 0x0c
    1a96:	2b 87       	std	Y+11, r18	; 0x0b
    1a98:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a9a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	f9 f0       	breq	.+62     	; 0x1ade <RTC_TimeHrFormat+0xb2>
    1aa0:	2b 85       	ldd	r18, Y+11	; 0x0b
    1aa2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1aa4:	21 30       	cpi	r18, 0x01	; 1
    1aa6:	31 05       	cpc	r19, r1
    1aa8:	e9 f4       	brne	.+58     	; 0x1ae4 <RTC_TimeHrFormat+0xb8>

	case time_format_12:

		SET_BIT(local_HR_time,6);
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	80 64       	ori	r24, 0x40	; 64
    1aae:	8b 83       	std	Y+3, r24	; 0x03

		switch(copy_time_mode){
    1ab0:	88 85       	ldd	r24, Y+8	; 0x08
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	3a 87       	std	Y+10, r19	; 0x0a
    1ab8:	29 87       	std	Y+9, r18	; 0x09
    1aba:	89 85       	ldd	r24, Y+9	; 0x09
    1abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	31 f0       	breq	.+12     	; 0x1ace <RTC_TimeHrFormat+0xa2>
    1ac2:	29 85       	ldd	r18, Y+9	; 0x09
    1ac4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ac6:	21 30       	cpi	r18, 0x01	; 1
    1ac8:	31 05       	cpc	r19, r1
    1aca:	29 f0       	breq	.+10     	; 0x1ad6 <RTC_TimeHrFormat+0xaa>
    1acc:	0b c0       	rjmp	.+22     	; 0x1ae4 <RTC_TimeHrFormat+0xb8>
		case AM:
			CLR_BIT(local_HR_time,5);
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	8f 7d       	andi	r24, 0xDF	; 223
    1ad2:	8b 83       	std	Y+3, r24	; 0x03
    1ad4:	07 c0       	rjmp	.+14     	; 0x1ae4 <RTC_TimeHrFormat+0xb8>

			break;
		case PM:
			SET_BIT(local_HR_time,5);
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	80 62       	ori	r24, 0x20	; 32
    1ada:	8b 83       	std	Y+3, r24	; 0x03
    1adc:	03 c0       	rjmp	.+6      	; 0x1ae4 <RTC_TimeHrFormat+0xb8>

		break;

		case time_format_24:

			CLR_BIT(local_HR_time,6);
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	8f 7b       	andi	r24, 0xBF	; 191
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
			break;

	}

	local_HR_time |= ( HR_format[0] | ( HR_format[1] <<4) );
    1ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	88 2f       	mov	r24, r24
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	82 95       	swap	r24
    1af0:	92 95       	swap	r25
    1af2:	90 7f       	andi	r25, 0xF0	; 240
    1af4:	98 27       	eor	r25, r24
    1af6:	80 7f       	andi	r24, 0xF0	; 240
    1af8:	98 27       	eor	r25, r24
    1afa:	92 2f       	mov	r25, r18
    1afc:	98 2b       	or	r25, r24
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	89 2b       	or	r24, r25
    1b02:	8b 83       	std	Y+3, r24	; 0x03

	return local_HR_time;
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1b06:	2c 96       	adiw	r28, 0x0c	; 12
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <RTC_dateFormat>:

u8 RTC_dateFormat(u8 copy_year_date){
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <RTC_dateFormat+0x6>
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <RTC_dateFormat+0x8>
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <RTC_dateFormat+0xa>
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	8e 83       	std	Y+6, r24	; 0x06

	u8 local_date =0;
    1b28:	1b 82       	std	Y+3, r1	; 0x03

	u8 date_format[2];

	u8 temp = copy_year_date;
    1b2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b2c:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 i=0;i<2;i++){
    1b2e:	19 82       	std	Y+1, r1	; 0x01
    1b30:	19 c0       	rjmp	.+50     	; 0x1b64 <RTC_dateFormat+0x4c>

		date_format[i] = temp % 10;
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	48 2f       	mov	r20, r24
    1b36:	50 e0       	ldi	r21, 0x00	; 0
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	9a e0       	ldi	r25, 0x0A	; 10
    1b3c:	69 2f       	mov	r22, r25
    1b3e:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodqi4>
    1b42:	89 2f       	mov	r24, r25
    1b44:	28 2f       	mov	r18, r24
    1b46:	ce 01       	movw	r24, r28
    1b48:	04 96       	adiw	r24, 0x04	; 4
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	e4 0f       	add	r30, r20
    1b4e:	f5 1f       	adc	r31, r21
    1b50:	20 83       	st	Z, r18

		temp = temp / 10;
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	9a e0       	ldi	r25, 0x0A	; 10
    1b56:	69 2f       	mov	r22, r25
    1b58:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodqi4>
    1b5c:	8a 83       	std	Y+2, r24	; 0x02

	u8 date_format[2];

	u8 temp = copy_year_date;

	for(u8 i=0;i<2;i++){
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	8f 5f       	subi	r24, 0xFF	; 255
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	20 f3       	brcs	.-56     	; 0x1b32 <RTC_dateFormat+0x1a>

		temp = temp / 10;

	}

	local_date = date_format[0] | (date_format[1]<<4);
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	82 95       	swap	r24
    1b76:	92 95       	swap	r25
    1b78:	90 7f       	andi	r25, 0xF0	; 240
    1b7a:	98 27       	eor	r25, r24
    1b7c:	80 7f       	andi	r24, 0xF0	; 240
    1b7e:	98 27       	eor	r25, r24
    1b80:	82 2b       	or	r24, r18
    1b82:	8b 83       	std	Y+3, r24	; 0x03

	return local_date;
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1b86:	26 96       	adiw	r28, 0x06	; 6
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <RTC_dayFormat>:

u8 RTC_dayFormat(u8 copy_year_day){
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <RTC_dayFormat+0x6>
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	8a 83       	std	Y+2, r24	; 0x02

	u8 local_day = copy_year_day;
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01

	return local_day;
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <RTC_MonthFormat>:

u8 RTC_MonthFormat(u8 copy_year_month){
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <RTC_MonthFormat+0x6>
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <RTC_MonthFormat+0x8>
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <RTC_MonthFormat+0xa>
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	8e 83       	std	Y+6, r24	; 0x06

	u8 month_format[2];

	u8 temp = copy_year_month;
    1bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc6:	8b 83       	std	Y+3, r24	; 0x03

	for(u8 i=0;i<2;i++){
    1bc8:	19 82       	std	Y+1, r1	; 0x01
    1bca:	19 c0       	rjmp	.+50     	; 0x1bfe <RTC_MonthFormat+0x4a>

		month_format[i] = temp % 10;
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	48 2f       	mov	r20, r24
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9a e0       	ldi	r25, 0x0A	; 10
    1bd6:	69 2f       	mov	r22, r25
    1bd8:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodqi4>
    1bdc:	89 2f       	mov	r24, r25
    1bde:	28 2f       	mov	r18, r24
    1be0:	ce 01       	movw	r24, r28
    1be2:	04 96       	adiw	r24, 0x04	; 4
    1be4:	fc 01       	movw	r30, r24
    1be6:	e4 0f       	add	r30, r20
    1be8:	f5 1f       	adc	r31, r21
    1bea:	20 83       	st	Z, r18

		temp = temp / 10;
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	9a e0       	ldi	r25, 0x0A	; 10
    1bf0:	69 2f       	mov	r22, r25
    1bf2:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodqi4>
    1bf6:	8b 83       	std	Y+3, r24	; 0x03

	u8 month_format[2];

	u8 temp = copy_year_month;

	for(u8 i=0;i<2;i++){
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	82 30       	cpi	r24, 0x02	; 2
    1c02:	20 f3       	brcs	.-56     	; 0x1bcc <RTC_MonthFormat+0x18>

		temp = temp / 10;

	}

	u8 local_month = month_format[0] | (month_format[1] << 4);
    1c04:	8c 81       	ldd	r24, Y+4	; 0x04
    1c06:	28 2f       	mov	r18, r24
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0a:	88 2f       	mov	r24, r24
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	82 95       	swap	r24
    1c10:	92 95       	swap	r25
    1c12:	90 7f       	andi	r25, 0xF0	; 240
    1c14:	98 27       	eor	r25, r24
    1c16:	80 7f       	andi	r24, 0xF0	; 240
    1c18:	98 27       	eor	r25, r24
    1c1a:	82 2b       	or	r24, r18
    1c1c:	8a 83       	std	Y+2, r24	; 0x02

	return local_month;
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c20:	26 96       	adiw	r28, 0x06	; 6
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <RTC_yearFormat>:

u8 RTC_yearFormat(u8 copy_year){
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <RTC_yearFormat+0x6>
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <RTC_yearFormat+0x8>
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <RTC_yearFormat+0xa>
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	8e 83       	std	Y+6, r24	; 0x06

	u8 year_format[2];

	u8 temp = copy_year;
    1c42:	8e 81       	ldd	r24, Y+6	; 0x06
    1c44:	8b 83       	std	Y+3, r24	; 0x03

	for(u8 i=0;i<2;i++){
    1c46:	19 82       	std	Y+1, r1	; 0x01
    1c48:	19 c0       	rjmp	.+50     	; 0x1c7c <RTC_yearFormat+0x4a>

		year_format[i] = temp % 10;
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9a e0       	ldi	r25, 0x0A	; 10
    1c54:	69 2f       	mov	r22, r25
    1c56:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodqi4>
    1c5a:	89 2f       	mov	r24, r25
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	ce 01       	movw	r24, r28
    1c60:	04 96       	adiw	r24, 0x04	; 4
    1c62:	fc 01       	movw	r30, r24
    1c64:	e4 0f       	add	r30, r20
    1c66:	f5 1f       	adc	r31, r21
    1c68:	20 83       	st	Z, r18

		temp = temp / 10;
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9a e0       	ldi	r25, 0x0A	; 10
    1c6e:	69 2f       	mov	r22, r25
    1c70:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodqi4>
    1c74:	8b 83       	std	Y+3, r24	; 0x03

	u8 year_format[2];

	u8 temp = copy_year;

	for(u8 i=0;i<2;i++){
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	8f 5f       	subi	r24, 0xFF	; 255
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	82 30       	cpi	r24, 0x02	; 2
    1c80:	20 f3       	brcs	.-56     	; 0x1c4a <RTC_yearFormat+0x18>

		temp = temp / 10;

	}

	u8 local_year = year_format[0] | (year_format[1] << 4);
    1c82:	8c 81       	ldd	r24, Y+4	; 0x04
    1c84:	28 2f       	mov	r18, r24
    1c86:	8d 81       	ldd	r24, Y+5	; 0x05
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	82 95       	swap	r24
    1c8e:	92 95       	swap	r25
    1c90:	90 7f       	andi	r25, 0xF0	; 240
    1c92:	98 27       	eor	r25, r24
    1c94:	80 7f       	andi	r24, 0xF0	; 240
    1c96:	98 27       	eor	r25, r24
    1c98:	82 2b       	or	r24, r18
    1c9a:	8a 83       	std	Y+2, r24	; 0x02

	return local_year;
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c9e:	26 96       	adiw	r28, 0x06	; 6
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <LCD_voidInit>:
#include "CLCD_ExtraCahr.h"



void LCD_voidInit(void)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	e4 97       	sbiw	r28, 0x34	; 52
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	cd bf       	out	0x3d, r28	; 61
	MCAL_DIO_u8SetPinDirection(RS_PORT,RS_PIN,DIO_U8PIN_OUTPUT);
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	63 e0       	ldi	r22, 0x03	; 3
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(E_PORT,E_PIN,DIO_U8PIN_OUTPUT);
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	62 e0       	ldi	r22, 0x02	; 2
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_u8SetPinDirection>

	MCAL_DIO_u8SetPinDirection(D4_PORT,D4_PIN,DIO_U8PIN_OUTPUT);
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(D5_PORT,D5_PIN,DIO_U8PIN_OUTPUT);
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	61 e0       	ldi	r22, 0x01	; 1
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(D6_PORT,D6_PIN,DIO_U8PIN_OUTPUT);
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	62 e0       	ldi	r22, 0x02	; 2
    1cf0:	41 e0       	ldi	r20, 0x01	; 1
    1cf2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(D7_PORT,D7_PIN,DIO_U8PIN_OUTPUT);
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	64 e0       	ldi	r22, 0x04	; 4
    1cfa:	41 e0       	ldi	r20, 0x01	; 1
    1cfc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_u8SetPinDirection>
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	a0 e7       	ldi	r26, 0x70	; 112
    1d06:	b1 e4       	ldi	r27, 0x41	; 65
    1d08:	89 ab       	std	Y+49, r24	; 0x31
    1d0a:	9a ab       	std	Y+50, r25	; 0x32
    1d0c:	ab ab       	std	Y+51, r26	; 0x33
    1d0e:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d10:	69 a9       	ldd	r22, Y+49	; 0x31
    1d12:	7a a9       	ldd	r23, Y+50	; 0x32
    1d14:	8b a9       	ldd	r24, Y+51	; 0x33
    1d16:	9c a9       	ldd	r25, Y+52	; 0x34
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	4a e7       	ldi	r20, 0x7A	; 122
    1d1e:	55 e4       	ldi	r21, 0x45	; 69
    1d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	8d a7       	std	Y+45, r24	; 0x2d
    1d2a:	9e a7       	std	Y+46, r25	; 0x2e
    1d2c:	af a7       	std	Y+47, r26	; 0x2f
    1d2e:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1d30:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d32:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d36:	98 a9       	ldd	r25, Y+48	; 0x30
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e8       	ldi	r20, 0x80	; 128
    1d3e:	5f e3       	ldi	r21, 0x3F	; 63
    1d40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d44:	88 23       	and	r24, r24
    1d46:	2c f4       	brge	.+10     	; 0x1d52 <LCD_voidInit+0xa2>
		__ticks = 1;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9c a7       	std	Y+44, r25	; 0x2c
    1d4e:	8b a7       	std	Y+43, r24	; 0x2b
    1d50:	3f c0       	rjmp	.+126    	; 0x1dd0 <LCD_voidInit+0x120>
	else if (__tmp > 65535)
    1d52:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d54:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d58:	98 a9       	ldd	r25, Y+48	; 0x30
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	3f ef       	ldi	r19, 0xFF	; 255
    1d5e:	4f e7       	ldi	r20, 0x7F	; 127
    1d60:	57 e4       	ldi	r21, 0x47	; 71
    1d62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d66:	18 16       	cp	r1, r24
    1d68:	4c f5       	brge	.+82     	; 0x1dbc <LCD_voidInit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d70:	9c a9       	ldd	r25, Y+52	; 0x34
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e2       	ldi	r20, 0x20	; 32
    1d78:	51 e4       	ldi	r21, 0x41	; 65
    1d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9c a7       	std	Y+44, r25	; 0x2c
    1d90:	8b a7       	std	Y+43, r24	; 0x2b
    1d92:	0f c0       	rjmp	.+30     	; 0x1db2 <LCD_voidInit+0x102>
    1d94:	80 e9       	ldi	r24, 0x90	; 144
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	9a a7       	std	Y+42, r25	; 0x2a
    1d9a:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d9c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <LCD_voidInit+0xf0>
    1da4:	9a a7       	std	Y+42, r25	; 0x2a
    1da6:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1daa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	9c a7       	std	Y+44, r25	; 0x2c
    1db0:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	69 f7       	brne	.-38     	; 0x1d94 <LCD_voidInit+0xe4>
    1dba:	14 c0       	rjmp	.+40     	; 0x1de4 <LCD_voidInit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1dbe:	7e a5       	ldd	r23, Y+46	; 0x2e
    1dc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dc2:	98 a9       	ldd	r25, Y+48	; 0x30
    1dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9c a7       	std	Y+44, r25	; 0x2c
    1dce:	8b a7       	std	Y+43, r24	; 0x2b
    1dd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dd4:	98 a7       	std	Y+40, r25	; 0x28
    1dd6:	8f a3       	std	Y+39, r24	; 0x27
    1dd8:	8f a1       	ldd	r24, Y+39	; 0x27
    1dda:	98 a5       	ldd	r25, Y+40	; 0x28
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <LCD_voidInit+0x12c>
    1de0:	98 a7       	std	Y+40, r25	; 0x28
    1de2:	8f a3       	std	Y+39, r24	; 0x27
//
//	/*Entry Mode  Auto increment */
//	Lcd_SendCmd(0x06);
	_delay_ms(15);

	Lcd_SendCmd(0x03);
    1de4:	83 e0       	ldi	r24, 0x03	; 3
    1de6:	0e 94 44 10 	call	0x2088	; 0x2088 <Lcd_SendCmd>
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a0 ea       	ldi	r26, 0xA0	; 160
    1df0:	b0 e4       	ldi	r27, 0x40	; 64
    1df2:	8b a3       	std	Y+35, r24	; 0x23
    1df4:	9c a3       	std	Y+36, r25	; 0x24
    1df6:	ad a3       	std	Y+37, r26	; 0x25
    1df8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1dfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1dfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1e00:	9e a1       	ldd	r25, Y+38	; 0x26
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	4a e7       	ldi	r20, 0x7A	; 122
    1e08:	55 e4       	ldi	r21, 0x45	; 69
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	8f 8f       	std	Y+31, r24	; 0x1f
    1e14:	98 a3       	std	Y+32, r25	; 0x20
    1e16:	a9 a3       	std	Y+33, r26	; 0x21
    1e18:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1e1a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e1c:	78 a1       	ldd	r23, Y+32	; 0x20
    1e1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e20:	9a a1       	ldd	r25, Y+34	; 0x22
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e8       	ldi	r20, 0x80	; 128
    1e28:	5f e3       	ldi	r21, 0x3F	; 63
    1e2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	2c f4       	brge	.+10     	; 0x1e3c <LCD_voidInit+0x18c>
		__ticks = 1;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	9e 8f       	std	Y+30, r25	; 0x1e
    1e38:	8d 8f       	std	Y+29, r24	; 0x1d
    1e3a:	3f c0       	rjmp	.+126    	; 0x1eba <LCD_voidInit+0x20a>
	else if (__tmp > 65535)
    1e3c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e3e:	78 a1       	ldd	r23, Y+32	; 0x20
    1e40:	89 a1       	ldd	r24, Y+33	; 0x21
    1e42:	9a a1       	ldd	r25, Y+34	; 0x22
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	3f ef       	ldi	r19, 0xFF	; 255
    1e48:	4f e7       	ldi	r20, 0x7F	; 127
    1e4a:	57 e4       	ldi	r21, 0x47	; 71
    1e4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e50:	18 16       	cp	r1, r24
    1e52:	4c f5       	brge	.+82     	; 0x1ea6 <LCD_voidInit+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e54:	6b a1       	ldd	r22, Y+35	; 0x23
    1e56:	7c a1       	ldd	r23, Y+36	; 0x24
    1e58:	8d a1       	ldd	r24, Y+37	; 0x25
    1e5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e2       	ldi	r20, 0x20	; 32
    1e62:	51 e4       	ldi	r21, 0x41	; 65
    1e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9e 8f       	std	Y+30, r25	; 0x1e
    1e7a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e7c:	0f c0       	rjmp	.+30     	; 0x1e9c <LCD_voidInit+0x1ec>
    1e7e:	80 e9       	ldi	r24, 0x90	; 144
    1e80:	91 e0       	ldi	r25, 0x01	; 1
    1e82:	9c 8f       	std	Y+28, r25	; 0x1c
    1e84:	8b 8f       	std	Y+27, r24	; 0x1b
    1e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <LCD_voidInit+0x1da>
    1e8e:	9c 8f       	std	Y+28, r25	; 0x1c
    1e90:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	9e 8f       	std	Y+30, r25	; 0x1e
    1e9a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e9e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	69 f7       	brne	.-38     	; 0x1e7e <LCD_voidInit+0x1ce>
    1ea4:	14 c0       	rjmp	.+40     	; 0x1ece <LCD_voidInit+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ea8:	78 a1       	ldd	r23, Y+32	; 0x20
    1eaa:	89 a1       	ldd	r24, Y+33	; 0x21
    1eac:	9a a1       	ldd	r25, Y+34	; 0x22
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb8:	8d 8f       	std	Y+29, r24	; 0x1d
    1eba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ebc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ebe:	9a 8f       	std	Y+26, r25	; 0x1a
    1ec0:	89 8f       	std	Y+25, r24	; 0x19
    1ec2:	89 8d       	ldd	r24, Y+25	; 0x19
    1ec4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_voidInit+0x216>
    1eca:	9a 8f       	std	Y+26, r25	; 0x1a
    1ecc:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_SendCmd(0x03);
    1ece:	83 e0       	ldi	r24, 0x03	; 3
    1ed0:	0e 94 44 10 	call	0x2088	; 0x2088 <Lcd_SendCmd>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	a8 ec       	ldi	r26, 0xC8	; 200
    1eda:	b2 e4       	ldi	r27, 0x42	; 66
    1edc:	8d 8b       	std	Y+21, r24	; 0x15
    1ede:	9e 8b       	std	Y+22, r25	; 0x16
    1ee0:	af 8b       	std	Y+23, r26	; 0x17
    1ee2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ee4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eea:	98 8d       	ldd	r25, Y+24	; 0x18
    1eec:	2b ea       	ldi	r18, 0xAB	; 171
    1eee:	3a ea       	ldi	r19, 0xAA	; 170
    1ef0:	4a ea       	ldi	r20, 0xAA	; 170
    1ef2:	50 e4       	ldi	r21, 0x40	; 64
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	89 8b       	std	Y+17, r24	; 0x11
    1efe:	9a 8b       	std	Y+18, r25	; 0x12
    1f00:	ab 8b       	std	Y+19, r26	; 0x13
    1f02:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f04:	69 89       	ldd	r22, Y+17	; 0x11
    1f06:	7a 89       	ldd	r23, Y+18	; 0x12
    1f08:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e8       	ldi	r20, 0x80	; 128
    1f12:	5f e3       	ldi	r21, 0x3F	; 63
    1f14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f18:	88 23       	and	r24, r24
    1f1a:	1c f4       	brge	.+6      	; 0x1f22 <LCD_voidInit+0x272>
		__ticks = 1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	88 8b       	std	Y+16, r24	; 0x10
    1f20:	91 c0       	rjmp	.+290    	; 0x2044 <LCD_voidInit+0x394>
	else if (__tmp > 255)
    1f22:	69 89       	ldd	r22, Y+17	; 0x11
    1f24:	7a 89       	ldd	r23, Y+18	; 0x12
    1f26:	8b 89       	ldd	r24, Y+19	; 0x13
    1f28:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	4f e7       	ldi	r20, 0x7F	; 127
    1f30:	53 e4       	ldi	r21, 0x43	; 67
    1f32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f36:	18 16       	cp	r1, r24
    1f38:	0c f0       	brlt	.+2      	; 0x1f3c <LCD_voidInit+0x28c>
    1f3a:	7b c0       	rjmp	.+246    	; 0x2032 <LCD_voidInit+0x382>
	{
		_delay_ms(__us / 1000.0);
    1f3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f40:	8f 89       	ldd	r24, Y+23	; 0x17
    1f42:	98 8d       	ldd	r25, Y+24	; 0x18
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	4a e7       	ldi	r20, 0x7A	; 122
    1f4a:	54 e4       	ldi	r21, 0x44	; 68
    1f4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	8c 87       	std	Y+12, r24	; 0x0c
    1f56:	9d 87       	std	Y+13, r25	; 0x0d
    1f58:	ae 87       	std	Y+14, r26	; 0x0e
    1f5a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f60:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f62:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a e7       	ldi	r20, 0x7A	; 122
    1f6a:	55 e4       	ldi	r21, 0x45	; 69
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	88 87       	std	Y+8, r24	; 0x08
    1f76:	99 87       	std	Y+9, r25	; 0x09
    1f78:	aa 87       	std	Y+10, r26	; 0x0a
    1f7a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f7c:	68 85       	ldd	r22, Y+8	; 0x08
    1f7e:	79 85       	ldd	r23, Y+9	; 0x09
    1f80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <LCD_voidInit+0x2ee>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9f 83       	std	Y+7, r25	; 0x07
    1f9a:	8e 83       	std	Y+6, r24	; 0x06
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <LCD_voidInit+0x36c>
	else if (__tmp > 65535)
    1f9e:	68 85       	ldd	r22, Y+8	; 0x08
    1fa0:	79 85       	ldd	r23, Y+9	; 0x09
    1fa2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fa4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <LCD_voidInit+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fb8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fba:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fbc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9f 83       	std	Y+7, r25	; 0x07
    1fdc:	8e 83       	std	Y+6, r24	; 0x06
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <LCD_voidInit+0x34e>
    1fe0:	80 e9       	ldi	r24, 0x90	; 144
    1fe2:	91 e0       	ldi	r25, 0x01	; 1
    1fe4:	9d 83       	std	Y+5, r25	; 0x05
    1fe6:	8c 83       	std	Y+4, r24	; 0x04
    1fe8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fea:	9d 81       	ldd	r25, Y+5	; 0x05
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_voidInit+0x33c>
    1ff0:	9d 83       	std	Y+5, r25	; 0x05
    1ff2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	9f 83       	std	Y+7, r25	; 0x07
    1ffc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    2000:	9f 81       	ldd	r25, Y+7	; 0x07
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <LCD_voidInit+0x330>
    2006:	24 c0       	rjmp	.+72     	; 0x2050 <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	68 85       	ldd	r22, Y+8	; 0x08
    200a:	79 85       	ldd	r23, Y+9	; 0x09
    200c:	8a 85       	ldd	r24, Y+10	; 0x0a
    200e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9f 83       	std	Y+7, r25	; 0x07
    201a:	8e 83       	std	Y+6, r24	; 0x06
    201c:	8e 81       	ldd	r24, Y+6	; 0x06
    201e:	9f 81       	ldd	r25, Y+7	; 0x07
    2020:	9b 83       	std	Y+3, r25	; 0x03
    2022:	8a 83       	std	Y+2, r24	; 0x02
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	9b 81       	ldd	r25, Y+3	; 0x03
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_voidInit+0x378>
    202c:	9b 83       	std	Y+3, r25	; 0x03
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <LCD_voidInit+0x3a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2032:	69 89       	ldd	r22, Y+17	; 0x11
    2034:	7a 89       	ldd	r23, Y+18	; 0x12
    2036:	8b 89       	ldd	r24, Y+19	; 0x13
    2038:	9c 89       	ldd	r25, Y+20	; 0x14
    203a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	88 8b       	std	Y+16, r24	; 0x10
    2044:	88 89       	ldd	r24, Y+16	; 0x10
    2046:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	8a 95       	dec	r24
    204c:	f1 f7       	brne	.-4      	; 0x204a <LCD_voidInit+0x39a>
    204e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_SendCmd(0x03);
    2050:	83 e0       	ldi	r24, 0x03	; 3
    2052:	0e 94 44 10 	call	0x2088	; 0x2088 <Lcd_SendCmd>
	Lcd_SendCmd(0x02);
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	0e 94 44 10 	call	0x2088	; 0x2088 <Lcd_SendCmd>
	Lcd_SendCmd(0x28);
    205c:	88 e2       	ldi	r24, 0x28	; 40
    205e:	0e 94 44 10 	call	0x2088	; 0x2088 <Lcd_SendCmd>
	Lcd_SendCmd(0x0C);
    2062:	8c e0       	ldi	r24, 0x0C	; 12
    2064:	0e 94 44 10 	call	0x2088	; 0x2088 <Lcd_SendCmd>
	Lcd_Goto_Row_Column(0, 0);
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	0e 94 75 12 	call	0x24ea	; 0x24ea <Lcd_Goto_Row_Column>
	Lcd_SendCmd(0x01);
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	0e 94 44 10 	call	0x2088	; 0x2088 <Lcd_SendCmd>

}
    2076:	e4 96       	adiw	r28, 0x34	; 52
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <Lcd_SendCmd>:

void Lcd_SendCmd(u8 Command)

{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	0f 92       	push	r0
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	89 83       	std	Y+1, r24	; 0x01

	/* command mode */
	MCAL_DIO_u8SetPinValue(RS_PORT,RS_PIN,DIO_U8PIN_LOW);
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	63 e0       	ldi	r22, 0x03	; 3
    2098:	40 e0       	ldi	r20, 0x00	; 0
    209a:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>


  /*      Send Command         */
		MCAL_DIO_u8SetPinValue(D7_PORT,D7_PIN,GET_BIT(Command,7));
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	98 2f       	mov	r25, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	99 27       	eor	r25, r25
    20a6:	99 1f       	adc	r25, r25
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	64 e0       	ldi	r22, 0x04	; 4
    20ac:	49 2f       	mov	r20, r25
    20ae:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(D6_PORT,D6_PIN,GET_BIT(Command,6));
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	82 95       	swap	r24
    20b6:	86 95       	lsr	r24
    20b8:	86 95       	lsr	r24
    20ba:	83 70       	andi	r24, 0x03	; 3
    20bc:	98 2f       	mov	r25, r24
    20be:	91 70       	andi	r25, 0x01	; 1
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	62 e0       	ldi	r22, 0x02	; 2
    20c4:	49 2f       	mov	r20, r25
    20c6:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(D5_PORT,D5_PIN,GET_BIT(Command,5));
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	82 95       	swap	r24
    20ce:	86 95       	lsr	r24
    20d0:	87 70       	andi	r24, 0x07	; 7
    20d2:	98 2f       	mov	r25, r24
    20d4:	91 70       	andi	r25, 0x01	; 1
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	61 e0       	ldi	r22, 0x01	; 1
    20da:	49 2f       	mov	r20, r25
    20dc:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(D4_PORT,D4_PIN,GET_BIT(Command,4));
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	82 95       	swap	r24
    20e4:	8f 70       	andi	r24, 0x0F	; 15
    20e6:	98 2f       	mov	r25, r24
    20e8:	91 70       	andi	r25, 0x01	; 1
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	49 2f       	mov	r20, r25
    20f0:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>



		/*   Latching   */
		Enable_Pulse();
    20f4:	0e 94 0c 11 	call	0x2218	; 0x2218 <Enable_Pulse>

		MCAL_DIO_u8SetPinValue(D7_PORT,D7_PIN,GET_BIT(Command,3));
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	86 95       	lsr	r24
    20fc:	86 95       	lsr	r24
    20fe:	86 95       	lsr	r24
    2100:	98 2f       	mov	r25, r24
    2102:	91 70       	andi	r25, 0x01	; 1
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	64 e0       	ldi	r22, 0x04	; 4
    2108:	49 2f       	mov	r20, r25
    210a:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(D6_PORT,D6_PIN,GET_BIT(Command,2));
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	86 95       	lsr	r24
    2112:	86 95       	lsr	r24
    2114:	98 2f       	mov	r25, r24
    2116:	91 70       	andi	r25, 0x01	; 1
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	62 e0       	ldi	r22, 0x02	; 2
    211c:	49 2f       	mov	r20, r25
    211e:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(D5_PORT,D5_PIN,GET_BIT(Command,1));
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	86 95       	lsr	r24
    2126:	98 2f       	mov	r25, r24
    2128:	91 70       	andi	r25, 0x01	; 1
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	61 e0       	ldi	r22, 0x01	; 1
    212e:	49 2f       	mov	r20, r25
    2130:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(D4_PORT,D4_PIN,GET_BIT(Command,0));
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	98 2f       	mov	r25, r24
    2138:	91 70       	andi	r25, 0x01	; 1
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	60 e0       	ldi	r22, 0x00	; 0
    213e:	49 2f       	mov	r20, r25
    2140:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>

  /*   Latching   */
  Enable_Pulse();
    2144:	0e 94 0c 11 	call	0x2218	; 0x2218 <Enable_Pulse>


}
    2148:	0f 90       	pop	r0
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <LCD_voidSenddata>:

void LCD_voidSenddata(u8 data)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	0f 92       	push	r0
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	89 83       	std	Y+1, r24	; 0x01
	MCAL_DIO_u8SetPinValue(RS_PORT,RS_PIN,DIO_U8PIN_HIGH);
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	63 e0       	ldi	r22, 0x03	; 3
    2160:	41 e0       	ldi	r20, 0x01	; 1
    2162:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>


	/*      Send Command         */

	MCAL_DIO_u8SetPinValue(D4_PORT,D4_PIN,GET_BIT(data,4));
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	82 95       	swap	r24
    216a:	8f 70       	andi	r24, 0x0F	; 15
    216c:	98 2f       	mov	r25, r24
    216e:	91 70       	andi	r25, 0x01	; 1
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	49 2f       	mov	r20, r25
    2176:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(D5_PORT,D5_PIN,GET_BIT(data,5));
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	82 95       	swap	r24
    217e:	86 95       	lsr	r24
    2180:	87 70       	andi	r24, 0x07	; 7
    2182:	98 2f       	mov	r25, r24
    2184:	91 70       	andi	r25, 0x01	; 1
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	61 e0       	ldi	r22, 0x01	; 1
    218a:	49 2f       	mov	r20, r25
    218c:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(D6_PORT,D6_PIN,GET_BIT(data,6));
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	82 95       	swap	r24
    2194:	86 95       	lsr	r24
    2196:	86 95       	lsr	r24
    2198:	83 70       	andi	r24, 0x03	; 3
    219a:	98 2f       	mov	r25, r24
    219c:	91 70       	andi	r25, 0x01	; 1
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	62 e0       	ldi	r22, 0x02	; 2
    21a2:	49 2f       	mov	r20, r25
    21a4:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(D7_PORT,D7_PIN,GET_BIT(data,7));
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	98 2f       	mov	r25, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	99 27       	eor	r25, r25
    21b0:	99 1f       	adc	r25, r25
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	64 e0       	ldi	r22, 0x04	; 4
    21b6:	49 2f       	mov	r20, r25
    21b8:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>



	/*   Latching   */
	Enable_Pulse();
    21bc:	0e 94 0c 11 	call	0x2218	; 0x2218 <Enable_Pulse>




		MCAL_DIO_u8SetPinValue(D4_PORT,D4_PIN,GET_BIT(data,0));
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	98 2f       	mov	r25, r24
    21c4:	91 70       	andi	r25, 0x01	; 1
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	49 2f       	mov	r20, r25
    21cc:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(D5_PORT,D5_PIN,GET_BIT(data,1));
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	86 95       	lsr	r24
    21d4:	98 2f       	mov	r25, r24
    21d6:	91 70       	andi	r25, 0x01	; 1
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	61 e0       	ldi	r22, 0x01	; 1
    21dc:	49 2f       	mov	r20, r25
    21de:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(D6_PORT,D6_PIN,GET_BIT(data,2));
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	86 95       	lsr	r24
    21e6:	86 95       	lsr	r24
    21e8:	98 2f       	mov	r25, r24
    21ea:	91 70       	andi	r25, 0x01	; 1
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	62 e0       	ldi	r22, 0x02	; 2
    21f0:	49 2f       	mov	r20, r25
    21f2:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(D7_PORT,D7_PIN,GET_BIT(data,3));
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	86 95       	lsr	r24
    21fa:	86 95       	lsr	r24
    21fc:	86 95       	lsr	r24
    21fe:	98 2f       	mov	r25, r24
    2200:	91 70       	andi	r25, 0x01	; 1
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	64 e0       	ldi	r22, 0x04	; 4
    2206:	49 2f       	mov	r20, r25
    2208:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
	/*   Latching   */
	Enable_Pulse();
    220c:	0e 94 0c 11 	call	0x2218	; 0x2218 <Enable_Pulse>


}
    2210:	0f 90       	pop	r0
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <Enable_Pulse>:



void Enable_Pulse(void)
{
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	a6 97       	sbiw	r28, 0x26	; 38
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	de bf       	out	0x3e, r29	; 62
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	cd bf       	out	0x3d, r28	; 61
		MCAL_DIO_u8SetPinValue(E_PORT,E_PIN,DIO_U8PIN_HIGH);
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	62 e0       	ldi	r22, 0x02	; 2
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	a0 e8       	ldi	r26, 0x80	; 128
    223c:	bf e3       	ldi	r27, 0x3F	; 63
    223e:	8b a3       	std	Y+35, r24	; 0x23
    2240:	9c a3       	std	Y+36, r25	; 0x24
    2242:	ad a3       	std	Y+37, r26	; 0x25
    2244:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2246:	6b a1       	ldd	r22, Y+35	; 0x23
    2248:	7c a1       	ldd	r23, Y+36	; 0x24
    224a:	8d a1       	ldd	r24, Y+37	; 0x25
    224c:	9e a1       	ldd	r25, Y+38	; 0x26
    224e:	2b ea       	ldi	r18, 0xAB	; 171
    2250:	3a ea       	ldi	r19, 0xAA	; 170
    2252:	4a ea       	ldi	r20, 0xAA	; 170
    2254:	50 e4       	ldi	r21, 0x40	; 64
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	8f 8f       	std	Y+31, r24	; 0x1f
    2260:	98 a3       	std	Y+32, r25	; 0x20
    2262:	a9 a3       	std	Y+33, r26	; 0x21
    2264:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2266:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2268:	78 a1       	ldd	r23, Y+32	; 0x20
    226a:	89 a1       	ldd	r24, Y+33	; 0x21
    226c:	9a a1       	ldd	r25, Y+34	; 0x22
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e8       	ldi	r20, 0x80	; 128
    2274:	5f e3       	ldi	r21, 0x3F	; 63
    2276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    227a:	88 23       	and	r24, r24
    227c:	1c f4       	brge	.+6      	; 0x2284 <Enable_Pulse+0x6c>
		__ticks = 1;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	8e 8f       	std	Y+30, r24	; 0x1e
    2282:	91 c0       	rjmp	.+290    	; 0x23a6 <Enable_Pulse+0x18e>
	else if (__tmp > 255)
    2284:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2286:	78 a1       	ldd	r23, Y+32	; 0x20
    2288:	89 a1       	ldd	r24, Y+33	; 0x21
    228a:	9a a1       	ldd	r25, Y+34	; 0x22
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4f e7       	ldi	r20, 0x7F	; 127
    2292:	53 e4       	ldi	r21, 0x43	; 67
    2294:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2298:	18 16       	cp	r1, r24
    229a:	0c f0       	brlt	.+2      	; 0x229e <Enable_Pulse+0x86>
    229c:	7b c0       	rjmp	.+246    	; 0x2394 <Enable_Pulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    229e:	6b a1       	ldd	r22, Y+35	; 0x23
    22a0:	7c a1       	ldd	r23, Y+36	; 0x24
    22a2:	8d a1       	ldd	r24, Y+37	; 0x25
    22a4:	9e a1       	ldd	r25, Y+38	; 0x26
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	4a e7       	ldi	r20, 0x7A	; 122
    22ac:	54 e4       	ldi	r21, 0x44	; 68
    22ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	8a 8f       	std	Y+26, r24	; 0x1a
    22b8:	9b 8f       	std	Y+27, r25	; 0x1b
    22ba:	ac 8f       	std	Y+28, r26	; 0x1c
    22bc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22c0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    22c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22c4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a e7       	ldi	r20, 0x7A	; 122
    22cc:	55 e4       	ldi	r21, 0x45	; 69
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8e 8b       	std	Y+22, r24	; 0x16
    22d8:	9f 8b       	std	Y+23, r25	; 0x17
    22da:	a8 8f       	std	Y+24, r26	; 0x18
    22dc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    22de:	6e 89       	ldd	r22, Y+22	; 0x16
    22e0:	7f 89       	ldd	r23, Y+23	; 0x17
    22e2:	88 8d       	ldd	r24, Y+24	; 0x18
    22e4:	99 8d       	ldd	r25, Y+25	; 0x19
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	2c f4       	brge	.+10     	; 0x2300 <Enable_Pulse+0xe8>
		__ticks = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9d 8b       	std	Y+21, r25	; 0x15
    22fc:	8c 8b       	std	Y+20, r24	; 0x14
    22fe:	3f c0       	rjmp	.+126    	; 0x237e <Enable_Pulse+0x166>
	else if (__tmp > 65535)
    2300:	6e 89       	ldd	r22, Y+22	; 0x16
    2302:	7f 89       	ldd	r23, Y+23	; 0x17
    2304:	88 8d       	ldd	r24, Y+24	; 0x18
    2306:	99 8d       	ldd	r25, Y+25	; 0x19
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	3f ef       	ldi	r19, 0xFF	; 255
    230c:	4f e7       	ldi	r20, 0x7F	; 127
    230e:	57 e4       	ldi	r21, 0x47	; 71
    2310:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2314:	18 16       	cp	r1, r24
    2316:	4c f5       	brge	.+82     	; 0x236a <Enable_Pulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2318:	6a 8d       	ldd	r22, Y+26	; 0x1a
    231a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    231c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    231e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9d 8b       	std	Y+21, r25	; 0x15
    233e:	8c 8b       	std	Y+20, r24	; 0x14
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <Enable_Pulse+0x148>
    2342:	80 e9       	ldi	r24, 0x90	; 144
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	9b 8b       	std	Y+19, r25	; 0x13
    2348:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    234a:	8a 89       	ldd	r24, Y+18	; 0x12
    234c:	9b 89       	ldd	r25, Y+19	; 0x13
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <Enable_Pulse+0x136>
    2352:	9b 8b       	std	Y+19, r25	; 0x13
    2354:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	8c 89       	ldd	r24, Y+20	; 0x14
    2358:	9d 89       	ldd	r25, Y+21	; 0x15
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	9d 8b       	std	Y+21, r25	; 0x15
    235e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	8c 89       	ldd	r24, Y+20	; 0x14
    2362:	9d 89       	ldd	r25, Y+21	; 0x15
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	69 f7       	brne	.-38     	; 0x2342 <Enable_Pulse+0x12a>
    2368:	24 c0       	rjmp	.+72     	; 0x23b2 <Enable_Pulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236a:	6e 89       	ldd	r22, Y+22	; 0x16
    236c:	7f 89       	ldd	r23, Y+23	; 0x17
    236e:	88 8d       	ldd	r24, Y+24	; 0x18
    2370:	99 8d       	ldd	r25, Y+25	; 0x19
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9d 8b       	std	Y+21, r25	; 0x15
    237c:	8c 8b       	std	Y+20, r24	; 0x14
    237e:	8c 89       	ldd	r24, Y+20	; 0x14
    2380:	9d 89       	ldd	r25, Y+21	; 0x15
    2382:	99 8b       	std	Y+17, r25	; 0x11
    2384:	88 8b       	std	Y+16, r24	; 0x10
    2386:	88 89       	ldd	r24, Y+16	; 0x10
    2388:	99 89       	ldd	r25, Y+17	; 0x11
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <Enable_Pulse+0x172>
    238e:	99 8b       	std	Y+17, r25	; 0x11
    2390:	88 8b       	std	Y+16, r24	; 0x10
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <Enable_Pulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2394:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2396:	78 a1       	ldd	r23, Y+32	; 0x20
    2398:	89 a1       	ldd	r24, Y+33	; 0x21
    239a:	9a a1       	ldd	r25, Y+34	; 0x22
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	8e 8f       	std	Y+30, r24	; 0x1e
    23a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23a8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ac:	8a 95       	dec	r24
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <Enable_Pulse+0x194>
    23b0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(1);
		MCAL_DIO_u8SetPinValue(E_PORT,E_PIN,DIO_U8PIN_LOW);
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	62 e0       	ldi	r22, 0x02	; 2
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	0e 94 a9 07 	call	0xf52	; 0xf52 <MCAL_DIO_u8SetPinValue>
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	a0 e0       	ldi	r26, 0x00	; 0
    23c2:	b0 e4       	ldi	r27, 0x40	; 64
    23c4:	8b 87       	std	Y+11, r24	; 0x0b
    23c6:	9c 87       	std	Y+12, r25	; 0x0c
    23c8:	ad 87       	std	Y+13, r26	; 0x0d
    23ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	4a e7       	ldi	r20, 0x7A	; 122
    23da:	55 e4       	ldi	r21, 0x45	; 69
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	8f 83       	std	Y+7, r24	; 0x07
    23e6:	98 87       	std	Y+8, r25	; 0x08
    23e8:	a9 87       	std	Y+9, r26	; 0x09
    23ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ec:	6f 81       	ldd	r22, Y+7	; 0x07
    23ee:	78 85       	ldd	r23, Y+8	; 0x08
    23f0:	89 85       	ldd	r24, Y+9	; 0x09
    23f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e8       	ldi	r20, 0x80	; 128
    23fa:	5f e3       	ldi	r21, 0x3F	; 63
    23fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2400:	88 23       	and	r24, r24
    2402:	2c f4       	brge	.+10     	; 0x240e <Enable_Pulse+0x1f6>
		__ticks = 1;
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9e 83       	std	Y+6, r25	; 0x06
    240a:	8d 83       	std	Y+5, r24	; 0x05
    240c:	3f c0       	rjmp	.+126    	; 0x248c <Enable_Pulse+0x274>
	else if (__tmp > 65535)
    240e:	6f 81       	ldd	r22, Y+7	; 0x07
    2410:	78 85       	ldd	r23, Y+8	; 0x08
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	9a 85       	ldd	r25, Y+10	; 0x0a
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	3f ef       	ldi	r19, 0xFF	; 255
    241a:	4f e7       	ldi	r20, 0x7F	; 127
    241c:	57 e4       	ldi	r21, 0x47	; 71
    241e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2422:	18 16       	cp	r1, r24
    2424:	4c f5       	brge	.+82     	; 0x2478 <Enable_Pulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2426:	6b 85       	ldd	r22, Y+11	; 0x0b
    2428:	7c 85       	ldd	r23, Y+12	; 0x0c
    242a:	8d 85       	ldd	r24, Y+13	; 0x0d
    242c:	9e 85       	ldd	r25, Y+14	; 0x0e
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e2       	ldi	r20, 0x20	; 32
    2434:	51 e4       	ldi	r21, 0x41	; 65
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
    244e:	0f c0       	rjmp	.+30     	; 0x246e <Enable_Pulse+0x256>
    2450:	80 e9       	ldi	r24, 0x90	; 144
    2452:	91 e0       	ldi	r25, 0x01	; 1
    2454:	9c 83       	std	Y+4, r25	; 0x04
    2456:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	9c 81       	ldd	r25, Y+4	; 0x04
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <Enable_Pulse+0x244>
    2460:	9c 83       	std	Y+4, r25	; 0x04
    2462:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	9e 83       	std	Y+6, r25	; 0x06
    246c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246e:	8d 81       	ldd	r24, Y+5	; 0x05
    2470:	9e 81       	ldd	r25, Y+6	; 0x06
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	69 f7       	brne	.-38     	; 0x2450 <Enable_Pulse+0x238>
    2476:	14 c0       	rjmp	.+40     	; 0x24a0 <Enable_Pulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2478:	6f 81       	ldd	r22, Y+7	; 0x07
    247a:	78 85       	ldd	r23, Y+8	; 0x08
    247c:	89 85       	ldd	r24, Y+9	; 0x09
    247e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	9e 83       	std	Y+6, r25	; 0x06
    248a:	8d 83       	std	Y+5, r24	; 0x05
    248c:	8d 81       	ldd	r24, Y+5	; 0x05
    248e:	9e 81       	ldd	r25, Y+6	; 0x06
    2490:	9a 83       	std	Y+2, r25	; 0x02
    2492:	89 83       	std	Y+1, r24	; 0x01
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	9a 81       	ldd	r25, Y+2	; 0x02
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <Enable_Pulse+0x280>
    249c:	9a 83       	std	Y+2, r25	; 0x02
    249e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
}
    24a0:	a6 96       	adiw	r28, 0x26	; 38
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	cd bf       	out	0x3d, r28	; 61
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <Lcd_DisplayStr>:



void Lcd_DisplayStr(u8* str)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <Lcd_DisplayStr+0x6>
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	89 83       	std	Y+1, r24	; 0x01
    24c0:	0a c0       	rjmp	.+20     	; 0x24d6 <Lcd_DisplayStr+0x24>
	while (*str != '\0')
	{
		Lcd_DisplayChr(*str);
    24c2:	e9 81       	ldd	r30, Y+1	; 0x01
    24c4:	fa 81       	ldd	r31, Y+2	; 0x02
    24c6:	80 81       	ld	r24, Z
    24c8:	0e 94 9c 12 	call	0x2538	; 0x2538 <Lcd_DisplayChr>
		str++;
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	9a 81       	ldd	r25, Y+2	; 0x02
    24d0:	01 96       	adiw	r24, 0x01	; 1
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01



void Lcd_DisplayStr(u8* str)
{
	while (*str != '\0')
    24d6:	e9 81       	ldd	r30, Y+1	; 0x01
    24d8:	fa 81       	ldd	r31, Y+2	; 0x02
    24da:	80 81       	ld	r24, Z
    24dc:	88 23       	and	r24, r24
    24de:	89 f7       	brne	.-30     	; 0x24c2 <Lcd_DisplayStr+0x10>
	{
		Lcd_DisplayChr(*str);
		str++;
	}
}
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	cf 91       	pop	r28
    24e6:	df 91       	pop	r29
    24e8:	08 95       	ret

000024ea <Lcd_Goto_Row_Column>:

void Lcd_Goto_Row_Column(u8 row, u8 col)
{
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	00 d0       	rcall	.+0      	; 0x24f0 <Lcd_Goto_Row_Column+0x6>
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <Lcd_Goto_Row_Column+0x8>
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	28 2f       	mov	r18, r24
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	3c 83       	std	Y+4, r19	; 0x04
    2502:	2b 83       	std	Y+3, r18	; 0x03
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	9c 81       	ldd	r25, Y+4	; 0x04
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	31 f0       	breq	.+12     	; 0x2518 <Lcd_Goto_Row_Column+0x2e>
    250c:	2b 81       	ldd	r18, Y+3	; 0x03
    250e:	3c 81       	ldd	r19, Y+4	; 0x04
    2510:	21 30       	cpi	r18, 0x01	; 1
    2512:	31 05       	cpc	r19, r1
    2514:	31 f0       	breq	.+12     	; 0x2522 <Lcd_Goto_Row_Column+0x38>
    2516:	09 c0       	rjmp	.+18     	; 0x252a <Lcd_Goto_Row_Column+0x40>
	{
		case 0:
		Lcd_SendCmd(0x80+col);
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	80 58       	subi	r24, 0x80	; 128
    251c:	0e 94 44 10 	call	0x2088	; 0x2088 <Lcd_SendCmd>
    2520:	04 c0       	rjmp	.+8      	; 0x252a <Lcd_Goto_Row_Column+0x40>
		break;

		case 1:
		Lcd_SendCmd(0xC0+col);
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	80 54       	subi	r24, 0x40	; 64
    2526:	0e 94 44 10 	call	0x2088	; 0x2088 <Lcd_SendCmd>
		break;
	}
}
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <Lcd_DisplayChr>:

void Lcd_DisplayChr(u8 chr)
{
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	0f 92       	push	r0
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSenddata(chr);
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	0e 94 a8 10 	call	0x2150	; 0x2150 <LCD_voidSenddata>
}
    254a:	0f 90       	pop	r0
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <HLCD_voidClearLCD>:


void HLCD_voidClearLCD(void)
{
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
	/*send Display clear instruction*/
	Lcd_SendCmd(_LCD_CLEAR);
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	0e 94 44 10 	call	0x2088	; 0x2088 <Lcd_SendCmd>

	}/*end of HLCD_voidClearLCD()*/
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <HLCD_voidReturnHome>:


void HLCD_voidReturnHome(void)
{
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
	 /*send Return home instruction*/
	 Lcd_SendCmd(_LCD_RETURN_HOME);
    256e:	82 e0       	ldi	r24, 0x02	; 2
    2570:	0e 94 44 10 	call	0x2088	; 0x2088 <Lcd_SendCmd>

}
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <atoi>:

int atoi(u8 str) {
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	00 d0       	rcall	.+0      	; 0x2580 <atoi+0x6>
    2580:	0f 92       	push	r0
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	8b 83       	std	Y+3, r24	; 0x03

    int result = 0;
    2588:	1a 82       	std	Y+2, r1	; 0x02
    258a:	19 82       	std	Y+1, r1	; 0x01
   // Check if the character is a digit between 0 and 9
   if (str >= '0' && str <= '9')
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	80 33       	cpi	r24, 0x30	; 48
    2590:	78 f0       	brcs	.+30     	; 0x25b0 <atoi+0x36>
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	8a 33       	cpi	r24, 0x3A	; 58
    2596:	60 f4       	brcc	.+24     	; 0x25b0 <atoi+0x36>
   {

       // Update the result by adding the digit and adjusting its position
       result += (str - '0');
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	88 2f       	mov	r24, r24
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	9c 01       	movw	r18, r24
    25a0:	20 53       	subi	r18, 0x30	; 48
    25a2:	30 40       	sbci	r19, 0x00	; 0
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	9a 81       	ldd	r25, Y+2	; 0x02
    25a8:	82 0f       	add	r24, r18
    25aa:	93 1f       	adc	r25, r19
    25ac:	9a 83       	std	Y+2, r25	; 0x02
    25ae:	89 83       	std	Y+1, r24	; 0x01

   }

    return result;
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <Lcd_Displaynum>:


void Lcd_Displaynum(u16 number)
{
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <Lcd_Displaynum+0x6>
    25c6:	00 d0       	rcall	.+0      	; 0x25c8 <Lcd_Displaynum+0x8>
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <Lcd_Displaynum+0xa>
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	9e 83       	std	Y+6, r25	; 0x06
    25d0:	8d 83       	std	Y+5, r24	; 0x05
	int value = atoi(number);
    25d2:	8d 81       	ldd	r24, Y+5	; 0x05
    25d4:	0e 94 bd 12 	call	0x257a	; 0x257a <atoi>
    25d8:	9c 83       	std	Y+4, r25	; 0x04
    25da:	8b 83       	std	Y+3, r24	; 0x03
    25dc:	16 c0       	rjmp	.+44     	; 0x260a <Lcd_Displaynum+0x4a>

	int remainder;

	while(number!=0){

		 remainder = number % 10;
    25de:	8d 81       	ldd	r24, Y+5	; 0x05
    25e0:	9e 81       	ldd	r25, Y+6	; 0x06
    25e2:	2a e0       	ldi	r18, 0x0A	; 10
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	b9 01       	movw	r22, r18
    25e8:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__udivmodhi4>
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01
		 Lcd_DisplayChr(remainder);
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	0e 94 9c 12 	call	0x2538	; 0x2538 <Lcd_DisplayChr>
		 number /= 10;
    25f6:	8d 81       	ldd	r24, Y+5	; 0x05
    25f8:	9e 81       	ldd	r25, Y+6	; 0x06
    25fa:	2a e0       	ldi	r18, 0x0A	; 10
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	b9 01       	movw	r22, r18
    2600:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__udivmodhi4>
    2604:	cb 01       	movw	r24, r22
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
{
	int value = atoi(number);

	int remainder;

	while(number!=0){
    260a:	8d 81       	ldd	r24, Y+5	; 0x05
    260c:	9e 81       	ldd	r25, Y+6	; 0x06
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	31 f7       	brne	.-52     	; 0x25de <Lcd_Displaynum+0x1e>
		 Lcd_DisplayChr(remainder);
		 number /= 10;
	}


}
    2612:	26 96       	adiw	r28, 0x06	; 6
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <main>:
WatchDog.
*/



void main(void){
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	63 97       	sbiw	r28, 0x13	; 19
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61

	PORT_voidInit();
    2638:	0e 94 00 0b 	call	0x1600	; 0x1600 <PORT_voidInit>
	LCD_voidInit();
    263c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_voidInit>
	RTC_voidInit();
    2640:	0e 94 22 0b 	call	0x1644	; 0x1644 <RTC_voidInit>

//	MCAL_DIO_u8SetPinDirection(DIO_U8PORTA,DIO_U8PIN7,DIO_U8PIN_OUTPUT);

	I2C_voidMasterInit(SCL_100KHZ);
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	0e 94 9b 09 	call	0x1336	; 0x1336 <I2C_voidMasterInit>

	time_t time_now;

	year_t year_now;

	time_now = RTC_GetTime();
    264a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <RTC_GetTime>
    264e:	2a 87       	std	Y+10, r18	; 0x0a
    2650:	3b 87       	std	Y+11, r19	; 0x0b
    2652:	4c 87       	std	Y+12, r20	; 0x0c
    2654:	5d 87       	std	Y+13, r21	; 0x0d
    2656:	6e 87       	std	Y+14, r22	; 0x0e
    2658:	ce 01       	movw	r24, r28
    265a:	01 96       	adiw	r24, 0x01	; 1
    265c:	98 8b       	std	Y+16, r25	; 0x10
    265e:	8f 87       	std	Y+15, r24	; 0x0f
    2660:	fe 01       	movw	r30, r28
    2662:	3a 96       	adiw	r30, 0x0a	; 10
    2664:	fa 8b       	std	Y+18, r31	; 0x12
    2666:	e9 8b       	std	Y+17, r30	; 0x11
    2668:	f5 e0       	ldi	r31, 0x05	; 5
    266a:	fb 8b       	std	Y+19, r31	; 0x13
    266c:	e9 89       	ldd	r30, Y+17	; 0x11
    266e:	fa 89       	ldd	r31, Y+18	; 0x12
    2670:	00 80       	ld	r0, Z
    2672:	89 89       	ldd	r24, Y+17	; 0x11
    2674:	9a 89       	ldd	r25, Y+18	; 0x12
    2676:	01 96       	adiw	r24, 0x01	; 1
    2678:	9a 8b       	std	Y+18, r25	; 0x12
    267a:	89 8b       	std	Y+17, r24	; 0x11
    267c:	ef 85       	ldd	r30, Y+15	; 0x0f
    267e:	f8 89       	ldd	r31, Y+16	; 0x10
    2680:	00 82       	st	Z, r0
    2682:	8f 85       	ldd	r24, Y+15	; 0x0f
    2684:	98 89       	ldd	r25, Y+16	; 0x10
    2686:	01 96       	adiw	r24, 0x01	; 1
    2688:	98 8b       	std	Y+16, r25	; 0x10
    268a:	8f 87       	std	Y+15, r24	; 0x0f
    268c:	9b 89       	ldd	r25, Y+19	; 0x13
    268e:	91 50       	subi	r25, 0x01	; 1
    2690:	9b 8b       	std	Y+19, r25	; 0x13
    2692:	eb 89       	ldd	r30, Y+19	; 0x13
    2694:	ee 23       	and	r30, r30
    2696:	51 f7       	brne	.-44     	; 0x266c <main+0x48>

	year_now = RTC_GetDate();
    2698:	0e 94 49 0c 	call	0x1892	; 0x1892 <RTC_GetDate>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	8e 83       	std	Y+6, r24	; 0x06
    26a2:	9f 83       	std	Y+7, r25	; 0x07
    26a4:	a8 87       	std	Y+8, r26	; 0x08
    26a6:	b9 87       	std	Y+9, r27	; 0x09
    26a8:	ff cf       	rjmp	.-2      	; 0x26a8 <main+0x84>

000026aa <__udivmodqi4>:
    26aa:	99 1b       	sub	r25, r25
    26ac:	79 e0       	ldi	r23, 0x09	; 9
    26ae:	04 c0       	rjmp	.+8      	; 0x26b8 <__udivmodqi4_ep>

000026b0 <__udivmodqi4_loop>:
    26b0:	99 1f       	adc	r25, r25
    26b2:	96 17       	cp	r25, r22
    26b4:	08 f0       	brcs	.+2      	; 0x26b8 <__udivmodqi4_ep>
    26b6:	96 1b       	sub	r25, r22

000026b8 <__udivmodqi4_ep>:
    26b8:	88 1f       	adc	r24, r24
    26ba:	7a 95       	dec	r23
    26bc:	c9 f7       	brne	.-14     	; 0x26b0 <__udivmodqi4_loop>
    26be:	80 95       	com	r24
    26c0:	08 95       	ret

000026c2 <__udivmodhi4>:
    26c2:	aa 1b       	sub	r26, r26
    26c4:	bb 1b       	sub	r27, r27
    26c6:	51 e1       	ldi	r21, 0x11	; 17
    26c8:	07 c0       	rjmp	.+14     	; 0x26d8 <__udivmodhi4_ep>

000026ca <__udivmodhi4_loop>:
    26ca:	aa 1f       	adc	r26, r26
    26cc:	bb 1f       	adc	r27, r27
    26ce:	a6 17       	cp	r26, r22
    26d0:	b7 07       	cpc	r27, r23
    26d2:	10 f0       	brcs	.+4      	; 0x26d8 <__udivmodhi4_ep>
    26d4:	a6 1b       	sub	r26, r22
    26d6:	b7 0b       	sbc	r27, r23

000026d8 <__udivmodhi4_ep>:
    26d8:	88 1f       	adc	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	5a 95       	dec	r21
    26de:	a9 f7       	brne	.-22     	; 0x26ca <__udivmodhi4_loop>
    26e0:	80 95       	com	r24
    26e2:	90 95       	com	r25
    26e4:	bc 01       	movw	r22, r24
    26e6:	cd 01       	movw	r24, r26
    26e8:	08 95       	ret

000026ea <__prologue_saves__>:
    26ea:	2f 92       	push	r2
    26ec:	3f 92       	push	r3
    26ee:	4f 92       	push	r4
    26f0:	5f 92       	push	r5
    26f2:	6f 92       	push	r6
    26f4:	7f 92       	push	r7
    26f6:	8f 92       	push	r8
    26f8:	9f 92       	push	r9
    26fa:	af 92       	push	r10
    26fc:	bf 92       	push	r11
    26fe:	cf 92       	push	r12
    2700:	df 92       	push	r13
    2702:	ef 92       	push	r14
    2704:	ff 92       	push	r15
    2706:	0f 93       	push	r16
    2708:	1f 93       	push	r17
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	ca 1b       	sub	r28, r26
    2714:	db 0b       	sbc	r29, r27
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	09 94       	ijmp

00002722 <__epilogue_restores__>:
    2722:	2a 88       	ldd	r2, Y+18	; 0x12
    2724:	39 88       	ldd	r3, Y+17	; 0x11
    2726:	48 88       	ldd	r4, Y+16	; 0x10
    2728:	5f 84       	ldd	r5, Y+15	; 0x0f
    272a:	6e 84       	ldd	r6, Y+14	; 0x0e
    272c:	7d 84       	ldd	r7, Y+13	; 0x0d
    272e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2730:	9b 84       	ldd	r9, Y+11	; 0x0b
    2732:	aa 84       	ldd	r10, Y+10	; 0x0a
    2734:	b9 84       	ldd	r11, Y+9	; 0x09
    2736:	c8 84       	ldd	r12, Y+8	; 0x08
    2738:	df 80       	ldd	r13, Y+7	; 0x07
    273a:	ee 80       	ldd	r14, Y+6	; 0x06
    273c:	fd 80       	ldd	r15, Y+5	; 0x05
    273e:	0c 81       	ldd	r16, Y+4	; 0x04
    2740:	1b 81       	ldd	r17, Y+3	; 0x03
    2742:	aa 81       	ldd	r26, Y+2	; 0x02
    2744:	b9 81       	ldd	r27, Y+1	; 0x01
    2746:	ce 0f       	add	r28, r30
    2748:	d1 1d       	adc	r29, r1
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	f8 94       	cli
    274e:	de bf       	out	0x3e, r29	; 62
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	cd bf       	out	0x3d, r28	; 61
    2754:	ed 01       	movw	r28, r26
    2756:	08 95       	ret

00002758 <_exit>:
    2758:	f8 94       	cli

0000275a <__stop_program>:
    275a:	ff cf       	rjmp	.-2      	; 0x275a <__stop_program>
